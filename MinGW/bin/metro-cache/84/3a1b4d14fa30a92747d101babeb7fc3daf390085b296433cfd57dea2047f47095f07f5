{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":19,"index":256},"end":{"line":7,"column":40,"index":277}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"]}},{"name":"./utils/url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":14,"index":293},"end":{"line":8,"column":36,"index":315}}],"key":"KwepoOiDJIvcZxDqcbtt8RBrwgA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getRoutes = getRoutes;\n  exports.getIgnoreList = getIgnoreList;\n  exports.extrapolateGroups = extrapolateGroups;\n  exports.generateDynamic = generateDynamic;\n  const matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  const url_1 = require(_dependencyMap[1], \"./utils/url\");\n  const validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options) {\n    const directoryTree = getDirectoryTree(contextModule, options);\n    // If there are no routes\n    if (!directoryTree) {\n      return null;\n    }\n    const rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n    if (!options.ignoreEntryPoints) {\n      crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n    }\n    return rootNode;\n  }\n  /**\n   * Converts the RequireContext keys (file paths) into a directory tree.\n   */\n  function getDirectoryTree(contextModule, options) {\n    const importMode = options.importMode || \"sync\";\n    const ignoreList = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n    if (options.ignore) {\n      ignoreList.push(...options.ignore);\n    }\n    if (!options.preserveApiRoutes) {\n      ignoreList.push(/\\+api$/, /\\+api\\.[tj]sx?$/);\n    }\n    const rootDirectory = {\n      files: new Map(),\n      subdirectories: new Map()\n    };\n    let hasRoutes = false;\n    let isValid = false;\n    const contextKeys = contextModule.keys();\n    const redirects = {};\n    const rewrites = {};\n    let validRedirectDestinations;\n    // If we are keeping redirects as valid routes, then we need to add them to the contextKeys\n    // This is useful for generating a sitemap with redirects, or static site generation that includes redirects\n    if (options.preserveRedirectAndRewrites) {\n      if (options.redirects) {\n        for (const redirect of options.redirects) {\n          // Remove the leading `./` or `/`\n          const source = redirect.source.replace(/^\\.?\\//, '');\n          const isExternalRedirect = (0, url_1.shouldLinkExternally)(redirect.destination);\n          const targetDestination = isExternalRedirect ? redirect.destination : (0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeFileSystemExtensions)(redirect.destination.replace(/^\\.?\\/?/, ''))));\n          const normalizedSource = (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(source));\n          if (ignoreList.some(regex => regex.test(normalizedSource))) {\n            continue;\n          }\n          // Loop over this once and cache the valid destinations\n          validRedirectDestinations ??= contextKeys.map(key => {\n            return [(0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(key))), key];\n          });\n          const destination = isExternalRedirect ? targetDestination : validRedirectDestinations.find(key => key[0] === targetDestination)?.[1];\n          if (!destination) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Redirect destination \"${redirect.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          const fakeContextKey = (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(source));\n          contextKeys.push(fakeContextKey);\n          redirects[fakeContextKey] = {\n            source,\n            destination,\n            permanent: Boolean(redirect.permanent),\n            external: isExternalRedirect,\n            methods: redirect.methods\n          };\n        }\n      }\n      if (options.rewrites) {\n        for (const rewrite of options.rewrites) {\n          // Remove the leading `./` or `/`\n          const source = rewrite.source.replace(/^\\.?\\//, '');\n          const targetDestination = (0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(rewrite.destination)));\n          const normalizedSource = (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(source));\n          if (ignoreList.some(regex => regex.test(normalizedSource))) {\n            continue;\n          }\n          // Loop over this once and cache the valid destinations\n          validRedirectDestinations ??= contextKeys.map(key => {\n            return [(0, matchers_1.stripInvisibleSegmentsFromPath)((0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(key))), key];\n          });\n          const destination = validRedirectDestinations.find(key => key[0] === targetDestination)?.[1];\n          if (!destination) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Redirect destination \"${rewrite.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          // Add a fake context key\n          const fakeContextKey = `./${source}.tsx`;\n          contextKeys.push(fakeContextKey);\n          rewrites[fakeContextKey] = {\n            source,\n            destination,\n            methods: rewrite.methods\n          };\n        }\n      }\n    }\n    for (const filePath of contextKeys) {\n      if (ignoreList.some(regex => regex.test(filePath))) {\n        continue;\n      }\n      isValid = true;\n      const meta = getFileMeta(filePath, options, redirects, rewrites);\n      // This is a file that should be ignored. e.g maybe it has an invalid platform?\n      if (meta.specificity < 0) {\n        continue;\n      }\n      let node = {\n        type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n        loadRoute() {\n          let routeModule;\n          if (options.ignoreRequireErrors) {\n            try {\n              routeModule = contextModule(filePath);\n            } catch {\n              routeModule = {};\n            }\n          } else {\n            routeModule = contextModule(filePath);\n          }\n          if (process.env.NODE_ENV === 'development' && importMode === 'sync') {\n            // In development mode, when async routes are disabled, add some extra error handling to improve the developer experience.\n            // This can be useful when you accidentally use an async function in a route file for the default export.\n            if (routeModule instanceof Promise) {\n              throw new Error(`Route \"${filePath}\" cannot be a promise when async routes is disabled.`);\n            }\n            const defaultExport = routeModule?.default;\n            if (defaultExport instanceof Promise) {\n              throw new Error(`The default export from route \"${filePath}\" is a promise. Ensure the React Component does not use async or promises.`);\n            }\n            // check if default is an async function without invoking it\n            if (defaultExport instanceof Function &&\n            // This only works on web because Hermes support async functions so we have to transform them out.\n            defaultExport.constructor.name === 'AsyncFunction') {\n              throw new Error(`The default export from route \"${filePath}\" is an async function. Ensure the React Component does not use async or promises.`);\n            }\n          }\n          return routeModule;\n        },\n        contextKey: filePath,\n        route: '',\n        // This is overwritten during hoisting based upon the _layout\n        dynamic: null,\n        children: [] // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n      };\n      if (meta.isRedirect) {\n        node.destinationContextKey = redirects[filePath].destination;\n        node.permanent = redirects[filePath].permanent;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'redirect',\n            route: (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(node.destinationContextKey))\n          }, node);\n        }\n        if (redirects[filePath].methods) {\n          node.methods = redirects[filePath].methods;\n        }\n        node.type = 'redirect';\n      }\n      if (meta.isRewrite) {\n        node.destinationContextKey = rewrites[filePath].destination;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'rewrite',\n            route: (0, matchers_1.removeFileSystemDots)((0, matchers_1.removeSupportedExtensions)(node.destinationContextKey))\n          }, node);\n        }\n        if (redirects[filePath].methods) {\n          node.methods = redirects[filePath].methods;\n        }\n        node.type = 'rewrite';\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n        // filter the missing routes.\n        if (node.type !== 'api' && importMode === 'sync') {\n          const routeItem = node.loadRoute();\n          // Have a warning for nullish ex\n          const route = routeItem?.default;\n          if (route == null) {\n            // Do not throw an error since a user may just be creating a new route.\n            console.warn(`Route \"${filePath}\" is missing the required default export. Ensure a React component is exported as default.`);\n            continue;\n          }\n          if (['boolean', 'number', 'string'].includes(typeof route)) {\n            throw new Error(`The default export from route \"${filePath}\" is an unsupported type: \"${typeof route}\". Only React Components are supported as default exports from route files.`);\n          }\n        }\n      }\n      /**\n       * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n       * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n       */\n      for (const route of extrapolateGroups(meta.route)) {\n        // Traverse the directory tree to its leaf node, creating any missing directories along the way\n        const subdirectoryParts = route.split('/').slice(0, -1);\n        // Start at the root directory and traverse the path to the leaf directory\n        let directory = rootDirectory;\n        for (const part of subdirectoryParts) {\n          let subDirectory = directory.subdirectories.get(part);\n          // Create any missing subdirectories\n          if (!subDirectory) {\n            subDirectory = {\n              files: new Map(),\n              subdirectories: new Map()\n            };\n            directory.subdirectories.set(part, subDirectory);\n          }\n          directory = subDirectory;\n        }\n        // Clone the node for this route\n        node = Object.assign({}, node, {\n          route\n        });\n        if (meta.isLayout) {\n          directory.layout ??= [];\n          const existing = directory.layout[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n            }\n          } else {\n            node = getLayoutNode(node, options);\n            directory.layout[meta.specificity] = node;\n          }\n        } else if (meta.isApi) {\n          const fileKey = `${route}+api`;\n          let nodes = directory.files.get(fileKey);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(fileKey, nodes);\n          }\n          // API Routes have no specificity, they are always the first node\n          const existing = nodes[0];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The API route file \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n            }\n          } else {\n            nodes[0] = node;\n          }\n        } else {\n          let nodes = directory.files.get(route);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(route, nodes);\n          }\n          /**\n           * If there is an existing node with the same specificity, then we have a conflict.\n           * NOTE(Platform Routes):\n           *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n           *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n           */\n          const existing = nodes[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The route files \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);\n            }\n          } else {\n            hasRoutes ||= true;\n            nodes[meta.specificity] = node;\n          }\n        }\n      }\n    }\n    // If there are no routes/layouts then we should display the tutorial.\n    if (!isValid) {\n      return null;\n    }\n    /**\n     * If there are no top-level _layout, add a default _layout\n     * While this is a generated route, it will still be generated even if skipGenerated is true.\n     */\n    if (!rootDirectory.layout) {\n      rootDirectory.layout = [options.getSystemRoute({\n        type: 'layout',\n        route: ''\n      })];\n    }\n    // Only include the sitemap if there are routes.\n    if (!options.skipGenerated) {\n      if (hasRoutes && options.sitemap !== false) {\n        appendSitemapRoute(rootDirectory, options);\n      }\n      if (options.notFound !== false) {\n        appendNotFoundRoute(rootDirectory, options);\n      }\n    }\n    return rootDirectory;\n  }\n  /**\n   * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n   */\n  function flattenDirectoryTreeToRoutes(directory, options, /* The nearest _layout file in the directory tree */\n  layout, /* Route names are relative to their layout */\n  pathToRemove = '') {\n    /**\n     * This directory has a _layout file so it becomes the new target for hoisting routes.\n     */\n    if (directory.layout) {\n      const previousLayout = layout;\n      layout = getMostSpecific(directory.layout);\n      // Add the new layout as a child of its parent\n      if (previousLayout) {\n        previousLayout.children.push(layout);\n      }\n      if (options.internal_stripLoadRoute) {\n        delete layout.loadRoute;\n      }\n      // `route` is the absolute pathname. We need to make this relative to the last _layout\n      const newRoute = layout.route.replace(pathToRemove, '');\n      pathToRemove = layout.route ? `${layout.route}/` : '';\n      // Now update this layout with the new relative route and dynamic conventions\n      layout.route = newRoute;\n      layout.dynamic = generateDynamic(layout.contextKey.slice(0));\n    }\n    // This should never occur as there will always be a root layout, but it makes the type system happy\n    if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n    for (const routes of directory.files.values()) {\n      const routeNode = getMostSpecific(routes);\n      // `route` is the absolute pathname. We need to make this relative to the nearest layout\n      routeNode.route = routeNode.route.replace(pathToRemove, '');\n      routeNode.dynamic = generateDynamic(routeNode.route);\n      if (options.internal_stripLoadRoute) {\n        delete routeNode.loadRoute;\n      }\n      layout.children.push(routeNode);\n    }\n    // Recursively flatten the subdirectories\n    for (const child of directory.subdirectories.values()) {\n      flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n    }\n    return layout;\n  }\n  function getFileMeta(originalKey, options, redirects, rewrites) {\n    // Remove the leading `./`\n    const key = (0, matchers_1.removeSupportedExtensions)((0, matchers_1.removeFileSystemDots)(originalKey));\n    let route = key;\n    const parts = (0, matchers_1.removeFileSystemDots)(originalKey).split('/');\n    const filename = parts[parts.length - 1];\n    const [filenameWithoutExtensions, platformExtension] = (0, matchers_1.removeSupportedExtensions)(filename).split('.');\n    const isLayout = filenameWithoutExtensions === '_layout';\n    const isApi = originalKey.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n    if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n      throw new Error(`Invalid route ${originalKey}. Routes cannot end with '(group)' syntax`);\n    }\n    // Nested routes cannot start with the '+' character, except for the '+not-found' route\n    if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n      const renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n      throw new Error(`Invalid route ${originalKey}. Route nodes cannot start with the '+' character. \"Please rename to ${renamedRoute}\"`);\n    }\n    let specificity = 0;\n    const hasPlatformExtension = validPlatforms.has(platformExtension);\n    const usePlatformRoutes = options.platformRoutes ?? true;\n    if (hasPlatformExtension) {\n      if (!usePlatformRoutes) {\n        // If the user has disabled platform routes, then we should ignore this file\n        specificity = -1;\n      } else if (!options.platform) {\n        // If we don't have a platform, then we should ignore this file\n        // This used by typed routes, sitemap, etc\n        specificity = -1;\n      } else if (platformExtension === options.platform) {\n        // If the platform extension is the same as the options.platform, then it is the most specific\n        specificity = 2;\n      } else if (platformExtension === 'native' && options.platform !== 'web') {\n        // `native` is allow but isn't as specific as the platform\n        specificity = 1;\n      } else if (platformExtension !== options.platform) {\n        // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n        // This is an invalid file and we will ignore it\n        specificity = -1;\n      }\n      if (isApi && specificity !== 0) {\n        throw new Error(`Api routes cannot have platform extensions. Please remove '.${platformExtension}' from '${originalKey}'`);\n      }\n      route = route.replace(new RegExp(`.${platformExtension}$`), '');\n    }\n    return {\n      route,\n      specificity,\n      isLayout,\n      isApi,\n      isRedirect: key in redirects,\n      isRewrite: key in rewrites\n    };\n  }\n  function getIgnoreList(options) {\n    const ignore = [/^\\.\\/\\+html\\.[tj]sx?$/, ...(options?.ignore ?? [])];\n    if (options?.preserveApiRoutes !== true) {\n      ignore.push(/\\+api\\.[tj]sx?$/);\n    }\n    return ignore;\n  }\n  /**\n   * Generates a set of strings which have the router array syntax extrapolated.\n   *\n   * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n   */\n  function extrapolateGroups(key, keys = new Set()) {\n    const match = (0, matchers_1.matchArrayGroupName)(key);\n    if (!match) {\n      keys.add(key);\n      return keys;\n    }\n    const groups = match.split(',');\n    const groupsSet = new Set(groups);\n    if (groupsSet.size !== groups.length) {\n      throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n    }\n    if (groups.length === 1) {\n      keys.add(key);\n      return keys;\n    }\n    for (const group of groups) {\n      extrapolateGroups(key.replace(match, group.trim()), keys);\n    }\n    return keys;\n  }\n  function generateDynamic(path) {\n    const dynamic = path.split('/').map(part => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true\n        };\n      }\n      const deepDynamicName = (0, matchers_1.matchDeepDynamicRouteName)(part);\n      const dynamicName = deepDynamicName ?? (0, matchers_1.matchDynamicName)(part);\n      if (!dynamicName) return null;\n      return {\n        name: dynamicName,\n        deep: !!deepDynamicName\n      };\n    }).filter(part => !!part);\n    return dynamic.length === 0 ? null : dynamic;\n  }\n  function appendSitemapRoute(directory, options) {\n    if (!directory.files.has('_sitemap') && options.getSystemRoute) {\n      directory.files.set('_sitemap', [options.getSystemRoute({\n        type: 'route',\n        route: '_sitemap'\n      })]);\n    }\n  }\n  function appendNotFoundRoute(directory, options) {\n    if (!directory.files.has('+not-found') && options.getSystemRoute) {\n      directory.files.set('+not-found', [options.getSystemRoute({\n        type: 'route',\n        route: '+not-found'\n      })]);\n    }\n  }\n  function getLayoutNode(node, options) {\n    /**\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different anchor based upon the first group name.\n     */\n    // We may strip loadRoute during testing\n    const groupName = (0, matchers_1.matchLastGroupName)(node.route);\n    const childMatchingGroup = node.children.find(child => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    let anchor = childMatchingGroup?.route;\n    const loaded = node.loadRoute();\n    if (loaded?.unstable_settings) {\n      try {\n        // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n        anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (!error.message.match(/You cannot dot into a client module/)) {\n            throw error;\n          }\n        }\n      }\n      if (groupName) {\n        // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n        const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n        anchor = groupSpecificInitialRouteName ?? anchor;\n      }\n    }\n    return Object.assign({}, node, {\n      route: node.route.replace(/\\/?_layout$/, ''),\n      children: [],\n      // Each layout should have its own children\n      initialRouteName: anchor\n    });\n  }\n  function crawlAndAppendInitialRoutesAndEntryFiles(node, options, entryPoints = []) {\n    if (node.type === 'route') {\n      node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n    } else if (node.type === 'redirect') {\n      node.entryPoints = [...new Set([...entryPoints, node.destinationContextKey])];\n    } else if (node.type === 'layout') {\n      if (!node.children) {\n        throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n      }\n      // Every node below this layout will have it as an entryPoint\n      entryPoints = [...entryPoints, node.contextKey];\n      /**\n       * Calculate the initialRouteNode\n       *\n       * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n       * Each of these layouts will have a different anchor based upon the first group.\n       */\n      const groupName = (0, matchers_1.matchGroupName)(node.route);\n      const childMatchingGroup = node.children.find(child => {\n        return child.route.replace(/\\/index$/, '') === groupName;\n      });\n      let anchor = childMatchingGroup?.route;\n      // We may strip loadRoute during testing\n      if (!options.internal_stripLoadRoute) {\n        const loaded = node.loadRoute();\n        if (loaded?.unstable_settings) {\n          try {\n            // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n            anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n          } catch (error) {\n            if (error instanceof Error) {\n              if (!error.message.match(/You cannot dot into a client module/)) {\n                throw error;\n              }\n            }\n          }\n          if (groupName) {\n            // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n            const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n            anchor = groupSpecificInitialRouteName ?? anchor;\n          }\n        }\n      }\n      if (anchor) {\n        const anchorRoute = node.children.find(child => child.route === anchor);\n        if (!anchorRoute) {\n          const validAnchorRoutes = node.children.filter(child => !child.generated).map(child => `'${child.route}'`).join(', ');\n          if (groupName) {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}' for group '(${groupName})'. Valid options are: ${validAnchorRoutes}`);\n          } else {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}'. Valid options are: ${validAnchorRoutes}`);\n          }\n        }\n        // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n        node.initialRouteName = anchor;\n        entryPoints.push(anchorRoute.contextKey);\n      }\n      for (const child of node.children) {\n        crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n      }\n    }\n  }\n  function getMostSpecific(routes) {\n    const route = routes[routes.length - 1];\n    if (!routes[0]) {\n      throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);\n    }\n    // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n    // `.length` includes the holes in its count\n    return routes[routes.length - 1];\n  }\n});","lineCount":607,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getRoutes"],[7,19,3,17],[7,22,3,20,"getRoutes"],[7,31,3,29],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getIgnoreList"],[8,23,4,21],[8,26,4,24,"getIgnoreList"],[8,39,4,37],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"extrapolateGroups"],[9,27,5,25],[9,30,5,28,"extrapolateGroups"],[9,47,5,45],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"generateDynamic"],[10,25,6,23],[10,28,6,26,"generateDynamic"],[10,43,6,41],[11,2,7,0],[11,8,7,6,"matchers_1"],[11,18,7,16],[11,21,7,19,"require"],[11,28,7,26],[11,29,7,26,"_dependencyMap"],[11,43,7,26],[11,60,7,39],[11,61,7,40],[12,2,8,0],[12,8,8,6,"url_1"],[12,13,8,11],[12,16,8,14,"require"],[12,23,8,21],[12,24,8,21,"_dependencyMap"],[12,38,8,21],[12,56,8,35],[12,57,8,36],[13,2,9,0],[13,8,9,6,"validPlatforms"],[13,22,9,20],[13,25,9,23],[13,29,9,27,"Set"],[13,32,9,30],[13,33,9,31],[13,34,9,32],[13,43,9,41],[13,45,9,43],[13,50,9,48],[13,52,9,50],[13,60,9,58],[13,62,9,60],[13,67,9,65],[13,68,9,66],[13,69,9,67],[14,2,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,2,22,0],[26,11,22,9,"getRoutes"],[26,20,22,18,"getRoutes"],[26,21,22,19,"contextModule"],[26,34,22,32],[26,36,22,34,"options"],[26,43,22,41],[26,45,22,43],[27,4,23,4],[27,10,23,10,"directoryTree"],[27,23,23,23],[27,26,23,26,"getDirectoryTree"],[27,42,23,42],[27,43,23,43,"contextModule"],[27,56,23,56],[27,58,23,58,"options"],[27,65,23,65],[27,66,23,66],[28,4,24,4],[29,4,25,4],[29,8,25,8],[29,9,25,9,"directoryTree"],[29,22,25,22],[29,24,25,24],[30,6,26,8],[30,13,26,15],[30,17,26,19],[31,4,27,4],[32,4,28,4],[32,10,28,10,"rootNode"],[32,18,28,18],[32,21,28,21,"flattenDirectoryTreeToRoutes"],[32,49,28,49],[32,50,28,50,"directoryTree"],[32,63,28,63],[32,65,28,65,"options"],[32,72,28,72],[32,73,28,73],[33,4,29,4],[33,8,29,8],[33,9,29,9,"options"],[33,16,29,16],[33,17,29,17,"ignoreEntryPoints"],[33,34,29,34],[33,36,29,36],[34,6,30,8,"crawlAndAppendInitialRoutesAndEntryFiles"],[34,46,30,48],[34,47,30,49,"rootNode"],[34,55,30,57],[34,57,30,59,"options"],[34,64,30,66],[34,65,30,67],[35,4,31,4],[36,4,32,4],[36,11,32,11,"rootNode"],[36,19,32,19],[37,2,33,0],[38,2,34,0],[39,0,35,0],[40,0,36,0],[41,2,37,0],[41,11,37,9,"getDirectoryTree"],[41,27,37,25,"getDirectoryTree"],[41,28,37,26,"contextModule"],[41,41,37,39],[41,43,37,41,"options"],[41,50,37,48],[41,52,37,50],[42,4,38,4],[42,10,38,10,"importMode"],[42,20,38,20],[42,23,38,23,"options"],[42,30,38,30],[42,31,38,31,"importMode"],[42,41,38,41],[42,51,38,80],[43,4,39,4],[43,10,39,10,"ignoreList"],[43,20,39,20],[43,23,39,23],[43,24,39,24],[43,63,39,63],[43,64,39,64],[43,65,39,65],[43,66,39,66],[44,4,40,4],[44,8,40,8,"options"],[44,15,40,15],[44,16,40,16,"ignore"],[44,22,40,22],[44,24,40,24],[45,6,41,8,"ignoreList"],[45,16,41,18],[45,17,41,19,"push"],[45,21,41,23],[45,22,41,24],[45,25,41,27,"options"],[45,32,41,34],[45,33,41,35,"ignore"],[45,39,41,41],[45,40,41,42],[46,4,42,4],[47,4,43,4],[47,8,43,8],[47,9,43,9,"options"],[47,16,43,16],[47,17,43,17,"preserveApiRoutes"],[47,34,43,34],[47,36,43,36],[48,6,44,8,"ignoreList"],[48,16,44,18],[48,17,44,19,"push"],[48,21,44,23],[48,22,44,24],[48,30,44,32],[48,32,44,34],[48,49,44,51],[48,50,44,52],[49,4,45,4],[50,4,46,4],[50,10,46,10,"rootDirectory"],[50,23,46,23],[50,26,46,26],[51,6,47,8,"files"],[51,11,47,13],[51,13,47,15],[51,17,47,19,"Map"],[51,20,47,22],[51,21,47,23],[51,22,47,24],[52,6,48,8,"subdirectories"],[52,20,48,22],[52,22,48,24],[52,26,48,28,"Map"],[52,29,48,31],[52,30,48,32],[53,4,49,4],[53,5,49,5],[54,4,50,4],[54,8,50,8,"hasRoutes"],[54,17,50,17],[54,20,50,20],[54,25,50,25],[55,4,51,4],[55,8,51,8,"isValid"],[55,15,51,15],[55,18,51,18],[55,23,51,23],[56,4,52,4],[56,10,52,10,"contextKeys"],[56,21,52,21],[56,24,52,24,"contextModule"],[56,37,52,37],[56,38,52,38,"keys"],[56,42,52,42],[56,43,52,43],[56,44,52,44],[57,4,53,4],[57,10,53,10,"redirects"],[57,19,53,19],[57,22,53,22],[57,23,53,23],[57,24,53,24],[58,4,54,4],[58,10,54,10,"rewrites"],[58,18,54,18],[58,21,54,21],[58,22,54,22],[58,23,54,23],[59,4,55,4],[59,8,55,8,"validRedirectDestinations"],[59,33,55,33],[60,4,56,4],[61,4,57,4],[62,4,58,4],[62,8,58,8,"options"],[62,15,58,15],[62,16,58,16,"preserveRedirectAndRewrites"],[62,43,58,43],[62,45,58,45],[63,6,59,8],[63,10,59,12,"options"],[63,17,59,19],[63,18,59,20,"redirects"],[63,27,59,29],[63,29,59,31],[64,8,60,12],[64,13,60,17],[64,19,60,23,"redirect"],[64,27,60,31],[64,31,60,35,"options"],[64,38,60,42],[64,39,60,43,"redirects"],[64,48,60,52],[64,50,60,54],[65,10,61,16],[66,10,62,16],[66,16,62,22,"source"],[66,22,62,28],[66,25,62,31,"redirect"],[66,33,62,39],[66,34,62,40,"source"],[66,40,62,46],[66,41,62,47,"replace"],[66,48,62,54],[66,49,62,55],[66,57,62,63],[66,59,62,65],[66,61,62,67],[66,62,62,68],[67,10,63,16],[67,16,63,22,"isExternalRedirect"],[67,34,63,40],[67,37,63,43],[67,38,63,44],[67,39,63,45],[67,41,63,47,"url_1"],[67,46,63,52],[67,47,63,53,"shouldLinkExternally"],[67,67,63,73],[67,69,63,75,"redirect"],[67,77,63,83],[67,78,63,84,"destination"],[67,89,63,95],[67,90,63,96],[68,10,64,16],[68,16,64,22,"targetDestination"],[68,33,64,39],[68,36,64,42,"isExternalRedirect"],[68,54,64,60],[68,57,65,22,"redirect"],[68,65,65,30],[68,66,65,31,"destination"],[68,77,65,42],[68,80,66,22],[68,81,66,23],[68,82,66,24],[68,84,66,26,"matchers_1"],[68,94,66,36],[68,95,66,37,"stripInvisibleSegmentsFromPath"],[68,125,66,67],[68,127,66,69],[68,128,66,70],[68,129,66,71],[68,131,66,73,"matchers_1"],[68,141,66,83],[68,142,66,84,"removeFileSystemDots"],[68,162,66,104],[68,164,66,106],[68,165,66,107],[68,166,66,108],[68,168,66,110,"matchers_1"],[68,178,66,120],[68,179,66,121,"removeFileSystemExtensions"],[68,205,66,147],[68,207,66,149,"redirect"],[68,215,66,157],[68,216,66,158,"destination"],[68,227,66,169],[68,228,66,170,"replace"],[68,235,66,177],[68,236,66,178],[68,245,66,187],[68,247,66,189],[68,249,66,191],[68,250,66,192],[68,251,66,193],[68,252,66,194],[68,253,66,195],[69,10,67,16],[69,16,67,22,"normalizedSource"],[69,32,67,38],[69,35,67,41],[69,36,67,42],[69,37,67,43],[69,39,67,45,"matchers_1"],[69,49,67,55],[69,50,67,56,"removeFileSystemDots"],[69,70,67,76],[69,72,67,78],[69,73,67,79],[69,74,67,80],[69,76,67,82,"matchers_1"],[69,86,67,92],[69,87,67,93,"removeSupportedExtensions"],[69,112,67,118],[69,114,67,120,"source"],[69,120,67,126],[69,121,67,127],[69,122,67,128],[70,10,68,16],[70,14,68,20,"ignoreList"],[70,24,68,30],[70,25,68,31,"some"],[70,29,68,35],[70,30,68,37,"regex"],[70,35,68,42],[70,39,68,47,"regex"],[70,44,68,52],[70,45,68,53,"test"],[70,49,68,57],[70,50,68,58,"normalizedSource"],[70,66,68,74],[70,67,68,75],[70,68,68,76],[70,70,68,78],[71,12,69,20],[72,10,70,16],[73,10,71,16],[74,10,72,16,"validRedirectDestinations"],[74,35,72,41],[74,40,72,46,"contextKeys"],[74,51,72,57],[74,52,72,58,"map"],[74,55,72,61],[74,56,72,63,"key"],[74,59,72,66],[74,63,72,71],[75,12,73,20],[75,19,73,27],[75,20,74,24],[75,21,74,25],[75,22,74,26],[75,24,74,28,"matchers_1"],[75,34,74,38],[75,35,74,39,"stripInvisibleSegmentsFromPath"],[75,65,74,69],[75,67,74,71],[75,68,74,72],[75,69,74,73],[75,71,74,75,"matchers_1"],[75,81,74,85],[75,82,74,86,"removeFileSystemDots"],[75,102,74,106],[75,104,74,108],[75,105,74,109],[75,106,74,110],[75,108,74,112,"matchers_1"],[75,118,74,122],[75,119,74,123,"removeSupportedExtensions"],[75,144,74,148],[75,146,74,150,"key"],[75,149,74,153],[75,150,74,154],[75,151,74,155],[75,152,74,156],[75,154,75,24,"key"],[75,157,75,27],[75,158,76,21],[76,10,77,16],[76,11,77,17],[76,12,77,18],[77,10,78,16],[77,16,78,22,"destination"],[77,27,78,33],[77,30,78,36,"isExternalRedirect"],[77,48,78,54],[77,51,79,22,"targetDestination"],[77,68,79,39],[77,71,80,22,"validRedirectDestinations"],[77,96,80,47],[77,97,80,48,"find"],[77,101,80,52],[77,102,80,54,"key"],[77,105,80,57],[77,109,80,62,"key"],[77,112,80,65],[77,113,80,66],[77,114,80,67],[77,115,80,68],[77,120,80,73,"targetDestination"],[77,137,80,90],[77,138,80,91],[77,141,80,94],[77,142,80,95],[77,143,80,96],[78,10,81,16],[78,14,81,20],[78,15,81,21,"destination"],[78,26,81,32],[78,28,81,34],[79,12,82,20],[80,0,83,0],[81,0,84,0],[82,0,85,0],[83,0,86,0],[84,0,87,0],[85,12,88,20],[85,16,88,24,"options"],[85,23,88,31],[85,24,88,32,"preserveApiRoutes"],[85,41,88,49],[85,43,88,51],[86,14,89,24],[86,20,89,30],[86,24,89,34,"Error"],[86,29,89,39],[86,30,89,40],[86,55,89,65,"redirect"],[86,63,89,73],[86,64,89,74,"destination"],[86,75,89,85],[86,94,89,104],[86,95,89,105],[87,12,90,20],[88,12,91,20],[89,10,92,16],[90,10,93,16],[90,16,93,22,"fakeContextKey"],[90,30,93,36],[90,33,93,39],[90,34,93,40],[90,35,93,41],[90,37,93,43,"matchers_1"],[90,47,93,53],[90,48,93,54,"removeFileSystemDots"],[90,68,93,74],[90,70,93,76],[90,71,93,77],[90,72,93,78],[90,74,93,80,"matchers_1"],[90,84,93,90],[90,85,93,91,"removeSupportedExtensions"],[90,110,93,116],[90,112,93,118,"source"],[90,118,93,124],[90,119,93,125],[90,120,93,126],[91,10,94,16,"contextKeys"],[91,21,94,27],[91,22,94,28,"push"],[91,26,94,32],[91,27,94,33,"fakeContextKey"],[91,41,94,47],[91,42,94,48],[92,10,95,16,"redirects"],[92,19,95,25],[92,20,95,26,"fakeContextKey"],[92,34,95,40],[92,35,95,41],[92,38,95,44],[93,12,96,20,"source"],[93,18,96,26],[94,12,97,20,"destination"],[94,23,97,31],[95,12,98,20,"permanent"],[95,21,98,29],[95,23,98,31,"Boolean"],[95,30,98,38],[95,31,98,39,"redirect"],[95,39,98,47],[95,40,98,48,"permanent"],[95,49,98,57],[95,50,98,58],[96,12,99,20,"external"],[96,20,99,28],[96,22,99,30,"isExternalRedirect"],[96,40,99,48],[97,12,100,20,"methods"],[97,19,100,27],[97,21,100,29,"redirect"],[97,29,100,37],[97,30,100,38,"methods"],[98,10,101,16],[98,11,101,17],[99,8,102,12],[100,6,103,8],[101,6,104,8],[101,10,104,12,"options"],[101,17,104,19],[101,18,104,20,"rewrites"],[101,26,104,28],[101,28,104,30],[102,8,105,12],[102,13,105,17],[102,19,105,23,"rewrite"],[102,26,105,30],[102,30,105,34,"options"],[102,37,105,41],[102,38,105,42,"rewrites"],[102,46,105,50],[102,48,105,52],[103,10,106,16],[104,10,107,16],[104,16,107,22,"source"],[104,22,107,28],[104,25,107,31,"rewrite"],[104,32,107,38],[104,33,107,39,"source"],[104,39,107,45],[104,40,107,46,"replace"],[104,47,107,53],[104,48,107,54],[104,56,107,62],[104,58,107,64],[104,60,107,66],[104,61,107,67],[105,10,108,16],[105,16,108,22,"targetDestination"],[105,33,108,39],[105,36,108,42],[105,37,108,43],[105,38,108,44],[105,40,108,46,"matchers_1"],[105,50,108,56],[105,51,108,57,"stripInvisibleSegmentsFromPath"],[105,81,108,87],[105,83,108,89],[105,84,108,90],[105,85,108,91],[105,87,108,93,"matchers_1"],[105,97,108,103],[105,98,108,104,"removeFileSystemDots"],[105,118,108,124],[105,120,108,126],[105,121,108,127],[105,122,108,128],[105,124,108,130,"matchers_1"],[105,134,108,140],[105,135,108,141,"removeSupportedExtensions"],[105,160,108,166],[105,162,108,168,"rewrite"],[105,169,108,175],[105,170,108,176,"destination"],[105,181,108,187],[105,182,108,188],[105,183,108,189],[105,184,108,190],[106,10,109,16],[106,16,109,22,"normalizedSource"],[106,32,109,38],[106,35,109,41],[106,36,109,42],[106,37,109,43],[106,39,109,45,"matchers_1"],[106,49,109,55],[106,50,109,56,"removeFileSystemDots"],[106,70,109,76],[106,72,109,78],[106,73,109,79],[106,74,109,80],[106,76,109,82,"matchers_1"],[106,86,109,92],[106,87,109,93,"removeSupportedExtensions"],[106,112,109,118],[106,114,109,120,"source"],[106,120,109,126],[106,121,109,127],[106,122,109,128],[107,10,110,16],[107,14,110,20,"ignoreList"],[107,24,110,30],[107,25,110,31,"some"],[107,29,110,35],[107,30,110,37,"regex"],[107,35,110,42],[107,39,110,47,"regex"],[107,44,110,52],[107,45,110,53,"test"],[107,49,110,57],[107,50,110,58,"normalizedSource"],[107,66,110,74],[107,67,110,75],[107,68,110,76],[107,70,110,78],[108,12,111,20],[109,10,112,16],[110,10,113,16],[111,10,114,16,"validRedirectDestinations"],[111,35,114,41],[111,40,114,46,"contextKeys"],[111,51,114,57],[111,52,114,58,"map"],[111,55,114,61],[111,56,114,63,"key"],[111,59,114,66],[111,63,114,71],[112,12,115,20],[112,19,115,27],[112,20,116,24],[112,21,116,25],[112,22,116,26],[112,24,116,28,"matchers_1"],[112,34,116,38],[112,35,116,39,"stripInvisibleSegmentsFromPath"],[112,65,116,69],[112,67,116,71],[112,68,116,72],[112,69,116,73],[112,71,116,75,"matchers_1"],[112,81,116,85],[112,82,116,86,"removeFileSystemDots"],[112,102,116,106],[112,104,116,108],[112,105,116,109],[112,106,116,110],[112,108,116,112,"matchers_1"],[112,118,116,122],[112,119,116,123,"removeSupportedExtensions"],[112,144,116,148],[112,146,116,150,"key"],[112,149,116,153],[112,150,116,154],[112,151,116,155],[112,152,116,156],[112,154,117,24,"key"],[112,157,117,27],[112,158,118,21],[113,10,119,16],[113,11,119,17],[113,12,119,18],[114,10,120,16],[114,16,120,22,"destination"],[114,27,120,33],[114,30,120,36,"validRedirectDestinations"],[114,55,120,61],[114,56,120,62,"find"],[114,60,120,66],[114,61,120,68,"key"],[114,64,120,71],[114,68,120,76,"key"],[114,71,120,79],[114,72,120,80],[114,73,120,81],[114,74,120,82],[114,79,120,87,"targetDestination"],[114,96,120,104],[114,97,120,105],[114,100,120,108],[114,101,120,109],[114,102,120,110],[115,10,121,16],[115,14,121,20],[115,15,121,21,"destination"],[115,26,121,32],[115,28,121,34],[116,12,122,20],[117,0,123,0],[118,0,124,0],[119,0,125,0],[120,0,126,0],[121,0,127,0],[122,12,128,20],[122,16,128,24,"options"],[122,23,128,31],[122,24,128,32,"preserveApiRoutes"],[122,41,128,49],[122,43,128,51],[123,14,129,24],[123,20,129,30],[123,24,129,34,"Error"],[123,29,129,39],[123,30,129,40],[123,55,129,65,"rewrite"],[123,62,129,72],[123,63,129,73,"destination"],[123,74,129,84],[123,93,129,103],[123,94,129,104],[124,12,130,20],[125,12,131,20],[126,10,132,16],[127,10,133,16],[128,10,134,16],[128,16,134,22,"fakeContextKey"],[128,30,134,36],[128,33,134,39],[128,38,134,44,"source"],[128,44,134,50],[128,50,134,56],[129,10,135,16,"contextKeys"],[129,21,135,27],[129,22,135,28,"push"],[129,26,135,32],[129,27,135,33,"fakeContextKey"],[129,41,135,47],[129,42,135,48],[130,10,136,16,"rewrites"],[130,18,136,24],[130,19,136,25,"fakeContextKey"],[130,33,136,39],[130,34,136,40],[130,37,136,43],[131,12,136,45,"source"],[131,18,136,51],[132,12,136,53,"destination"],[132,23,136,64],[133,12,136,66,"methods"],[133,19,136,73],[133,21,136,75,"rewrite"],[133,28,136,82],[133,29,136,83,"methods"],[134,10,136,91],[134,11,136,92],[135,8,137,12],[136,6,138,8],[137,4,139,4],[138,4,140,4],[138,9,140,9],[138,15,140,15,"filePath"],[138,23,140,23],[138,27,140,27,"contextKeys"],[138,38,140,38],[138,40,140,40],[139,6,141,8],[139,10,141,12,"ignoreList"],[139,20,141,22],[139,21,141,23,"some"],[139,25,141,27],[139,26,141,29,"regex"],[139,31,141,34],[139,35,141,39,"regex"],[139,40,141,44],[139,41,141,45,"test"],[139,45,141,49],[139,46,141,50,"filePath"],[139,54,141,58],[139,55,141,59],[139,56,141,60],[139,58,141,62],[140,8,142,12],[141,6,143,8],[142,6,144,8,"isValid"],[142,13,144,15],[142,16,144,18],[142,20,144,22],[143,6,145,8],[143,12,145,14,"meta"],[143,16,145,18],[143,19,145,21,"getFileMeta"],[143,30,145,32],[143,31,145,33,"filePath"],[143,39,145,41],[143,41,145,43,"options"],[143,48,145,50],[143,50,145,52,"redirects"],[143,59,145,61],[143,61,145,63,"rewrites"],[143,69,145,71],[143,70,145,72],[144,6,146,8],[145,6,147,8],[145,10,147,12,"meta"],[145,14,147,16],[145,15,147,17,"specificity"],[145,26,147,28],[145,29,147,31],[145,30,147,32],[145,32,147,34],[146,8,148,12],[147,6,149,8],[148,6,150,8],[148,10,150,12,"node"],[148,14,150,16],[148,17,150,19],[149,8,151,12,"type"],[149,12,151,16],[149,14,151,18,"meta"],[149,18,151,22],[149,19,151,23,"isApi"],[149,24,151,28],[149,27,151,31],[149,32,151,36],[149,35,151,39,"meta"],[149,39,151,43],[149,40,151,44,"isLayout"],[149,48,151,52],[149,51,151,55],[149,59,151,63],[149,62,151,66],[149,69,151,73],[150,8,152,12,"loadRoute"],[150,17,152,21,"loadRoute"],[150,18,152,21],[150,20,152,24],[151,10,153,16],[151,14,153,20,"routeModule"],[151,25,153,31],[152,10,154,16],[152,14,154,20,"options"],[152,21,154,27],[152,22,154,28,"ignoreRequireErrors"],[152,41,154,47],[152,43,154,49],[153,12,155,20],[153,16,155,24],[154,14,156,24,"routeModule"],[154,25,156,35],[154,28,156,38,"contextModule"],[154,41,156,51],[154,42,156,52,"filePath"],[154,50,156,60],[154,51,156,61],[155,12,157,20],[155,13,157,21],[155,14,158,20],[155,20,158,26],[156,14,159,24,"routeModule"],[156,25,159,35],[156,28,159,38],[156,29,159,39],[156,30,159,40],[157,12,160,20],[158,10,161,16],[158,11,161,17],[158,17,162,21],[159,12,163,20,"routeModule"],[159,23,163,31],[159,26,163,34,"contextModule"],[159,39,163,47],[159,40,163,48,"filePath"],[159,48,163,56],[159,49,163,57],[160,10,164,16],[161,10,165,16],[161,14,165,20,"process"],[161,21,165,27],[161,22,165,28,"env"],[161,25,165,31],[161,26,165,32,"NODE_ENV"],[161,34,165,40],[161,39,165,45],[161,52,165,58],[161,56,165,62,"importMode"],[161,66,165,72],[161,71,165,77],[161,77,165,83],[161,79,165,85],[162,12,166,20],[163,12,167,20],[164,12,168,20],[164,16,168,24,"routeModule"],[164,27,168,35],[164,39,168,47,"Promise"],[164,46,168,54],[164,48,168,56],[165,14,169,24],[165,20,169,30],[165,24,169,34,"Error"],[165,29,169,39],[165,30,169,40],[165,40,169,50,"filePath"],[165,48,169,58],[165,102,169,112],[165,103,169,113],[166,12,170,20],[167,12,171,20],[167,18,171,26,"defaultExport"],[167,31,171,39],[167,34,171,42,"routeModule"],[167,45,171,53],[167,47,171,55,"default"],[167,54,171,62],[168,12,172,20],[168,16,172,24,"defaultExport"],[168,29,172,37],[168,41,172,49,"Promise"],[168,48,172,56],[168,50,172,58],[169,14,173,24],[169,20,173,30],[169,24,173,34,"Error"],[169,29,173,39],[169,30,173,40],[169,64,173,74,"filePath"],[169,72,173,82],[169,148,173,158],[169,149,173,159],[170,12,174,20],[171,12,175,20],[172,12,176,20],[172,16,176,24,"defaultExport"],[172,29,176,37],[172,41,176,49,"Function"],[172,49,176,57],[173,12,177,24],[174,12,178,24,"defaultExport"],[174,25,178,37],[174,26,178,38,"constructor"],[174,37,178,49],[174,38,178,50,"name"],[174,42,178,54],[174,47,178,59],[174,62,178,74],[174,64,178,76],[175,14,179,24],[175,20,179,30],[175,24,179,34,"Error"],[175,29,179,39],[175,30,179,40],[175,64,179,74,"filePath"],[175,72,179,82],[175,156,179,166],[175,157,179,167],[176,12,180,20],[177,10,181,16],[178,10,182,16],[178,17,182,23,"routeModule"],[178,28,182,34],[179,8,183,12],[179,9,183,13],[180,8,184,12,"contextKey"],[180,18,184,22],[180,20,184,24,"filePath"],[180,28,184,32],[181,8,185,12,"route"],[181,13,185,17],[181,15,185,19],[181,17,185,21],[182,8,185,23],[183,8,186,12,"dynamic"],[183,15,186,19],[183,17,186,21],[183,21,186,25],[184,8,187,12,"children"],[184,16,187,20],[184,18,187,22],[184,20,187,24],[184,21,187,26],[185,6,188,8],[185,7,188,9],[186,6,189,8],[186,10,189,12,"meta"],[186,14,189,16],[186,15,189,17,"isRedirect"],[186,25,189,27],[186,27,189,29],[187,8,190,12,"node"],[187,12,190,16],[187,13,190,17,"destinationContextKey"],[187,34,190,38],[187,37,190,41,"redirects"],[187,46,190,50],[187,47,190,51,"filePath"],[187,55,190,59],[187,56,190,60],[187,57,190,61,"destination"],[187,68,190,72],[188,8,191,12,"node"],[188,12,191,16],[188,13,191,17,"permanent"],[188,22,191,26],[188,25,191,29,"redirects"],[188,34,191,38],[188,35,191,39,"filePath"],[188,43,191,47],[188,44,191,48],[188,45,191,49,"permanent"],[188,54,191,58],[189,8,192,12,"node"],[189,12,192,16],[189,13,192,17,"generated"],[189,22,192,26],[189,25,192,29],[189,29,192,33],[190,8,193,12],[190,12,193,16,"node"],[190,16,193,20],[190,17,193,21,"type"],[190,21,193,25],[190,26,193,30],[190,33,193,37],[190,35,193,39],[191,10,194,16,"node"],[191,14,194,20],[191,17,194,23,"options"],[191,24,194,30],[191,25,194,31,"getSystemRoute"],[191,39,194,45],[191,40,194,46],[192,12,195,20,"type"],[192,16,195,24],[192,18,195,26],[192,28,195,36],[193,12,196,20,"route"],[193,17,196,25],[193,19,196,27],[193,20,196,28],[193,21,196,29],[193,23,196,31,"matchers_1"],[193,33,196,41],[193,34,196,42,"removeFileSystemDots"],[193,54,196,62],[193,56,196,64],[193,57,196,65],[193,58,196,66],[193,60,196,68,"matchers_1"],[193,70,196,78],[193,71,196,79,"removeSupportedExtensions"],[193,96,196,104],[193,98,196,106,"node"],[193,102,196,110],[193,103,196,111,"destinationContextKey"],[193,124,196,132],[193,125,196,133],[194,10,197,16],[194,11,197,17],[194,13,197,19,"node"],[194,17,197,23],[194,18,197,24],[195,8,198,12],[196,8,199,12],[196,12,199,16,"redirects"],[196,21,199,25],[196,22,199,26,"filePath"],[196,30,199,34],[196,31,199,35],[196,32,199,36,"methods"],[196,39,199,43],[196,41,199,45],[197,10,200,16,"node"],[197,14,200,20],[197,15,200,21,"methods"],[197,22,200,28],[197,25,200,31,"redirects"],[197,34,200,40],[197,35,200,41,"filePath"],[197,43,200,49],[197,44,200,50],[197,45,200,51,"methods"],[197,52,200,58],[198,8,201,12],[199,8,202,12,"node"],[199,12,202,16],[199,13,202,17,"type"],[199,17,202,21],[199,20,202,24],[199,30,202,34],[200,6,203,8],[201,6,204,8],[201,10,204,12,"meta"],[201,14,204,16],[201,15,204,17,"isRewrite"],[201,24,204,26],[201,26,204,28],[202,8,205,12,"node"],[202,12,205,16],[202,13,205,17,"destinationContextKey"],[202,34,205,38],[202,37,205,41,"rewrites"],[202,45,205,49],[202,46,205,50,"filePath"],[202,54,205,58],[202,55,205,59],[202,56,205,60,"destination"],[202,67,205,71],[203,8,206,12,"node"],[203,12,206,16],[203,13,206,17,"generated"],[203,22,206,26],[203,25,206,29],[203,29,206,33],[204,8,207,12],[204,12,207,16,"node"],[204,16,207,20],[204,17,207,21,"type"],[204,21,207,25],[204,26,207,30],[204,33,207,37],[204,35,207,39],[205,10,208,16,"node"],[205,14,208,20],[205,17,208,23,"options"],[205,24,208,30],[205,25,208,31,"getSystemRoute"],[205,39,208,45],[205,40,208,46],[206,12,209,20,"type"],[206,16,209,24],[206,18,209,26],[206,27,209,35],[207,12,210,20,"route"],[207,17,210,25],[207,19,210,27],[207,20,210,28],[207,21,210,29],[207,23,210,31,"matchers_1"],[207,33,210,41],[207,34,210,42,"removeFileSystemDots"],[207,54,210,62],[207,56,210,64],[207,57,210,65],[207,58,210,66],[207,60,210,68,"matchers_1"],[207,70,210,78],[207,71,210,79,"removeSupportedExtensions"],[207,96,210,104],[207,98,210,106,"node"],[207,102,210,110],[207,103,210,111,"destinationContextKey"],[207,124,210,132],[207,125,210,133],[208,10,211,16],[208,11,211,17],[208,13,211,19,"node"],[208,17,211,23],[208,18,211,24],[209,8,212,12],[210,8,213,12],[210,12,213,16,"redirects"],[210,21,213,25],[210,22,213,26,"filePath"],[210,30,213,34],[210,31,213,35],[210,32,213,36,"methods"],[210,39,213,43],[210,41,213,45],[211,10,214,16,"node"],[211,14,214,20],[211,15,214,21,"methods"],[211,22,214,28],[211,25,214,31,"redirects"],[211,34,214,40],[211,35,214,41,"filePath"],[211,43,214,49],[211,44,214,50],[211,45,214,51,"methods"],[211,52,214,58],[212,8,215,12],[213,8,216,12,"node"],[213,12,216,16],[213,13,216,17,"type"],[213,17,216,21],[213,20,216,24],[213,29,216,33],[214,6,217,8],[215,6,218,8],[215,10,218,12,"process"],[215,17,218,19],[215,18,218,20,"env"],[215,21,218,23],[215,22,218,24,"NODE_ENV"],[215,30,218,32],[215,35,218,37],[215,48,218,50],[215,50,218,52],[216,8,219,12],[217,8,220,12],[218,8,221,12],[218,12,221,16,"node"],[218,16,221,20],[218,17,221,21,"type"],[218,21,221,25],[218,26,221,30],[218,31,221,35],[218,35,221,39,"importMode"],[218,45,221,49],[218,50,221,54],[218,56,221,60],[218,58,221,62],[219,10,222,16],[219,16,222,22,"routeItem"],[219,25,222,31],[219,28,222,34,"node"],[219,32,222,38],[219,33,222,39,"loadRoute"],[219,42,222,48],[219,43,222,49],[219,44,222,50],[220,10,223,16],[221,10,224,16],[221,16,224,22,"route"],[221,21,224,27],[221,24,224,30,"routeItem"],[221,33,224,39],[221,35,224,41,"default"],[221,42,224,48],[222,10,225,16],[222,14,225,20,"route"],[222,19,225,25],[222,23,225,29],[222,27,225,33],[222,29,225,35],[223,12,226,20],[224,12,227,20,"console"],[224,19,227,27],[224,20,227,28,"warn"],[224,24,227,32],[224,25,227,33],[224,35,227,43,"filePath"],[224,43,227,51],[224,135,227,143],[224,136,227,144],[225,12,228,20],[226,10,229,16],[227,10,230,16],[227,14,230,20],[227,15,230,21],[227,24,230,30],[227,26,230,32],[227,34,230,40],[227,36,230,42],[227,44,230,50],[227,45,230,51],[227,46,230,52,"includes"],[227,54,230,60],[227,55,230,61],[227,62,230,68,"route"],[227,67,230,73],[227,68,230,74],[227,70,230,76],[228,12,231,20],[228,18,231,26],[228,22,231,30,"Error"],[228,27,231,35],[228,28,231,36],[228,62,231,70,"filePath"],[228,70,231,78],[228,100,231,108],[228,107,231,115,"route"],[228,112,231,120],[228,189,231,197],[228,190,231,198],[229,10,232,16],[230,8,233,12],[231,6,234,8],[232,6,235,8],[233,0,236,0],[234,0,237,0],[235,0,238,0],[236,6,239,8],[236,11,239,13],[236,17,239,19,"route"],[236,22,239,24],[236,26,239,28,"extrapolateGroups"],[236,43,239,45],[236,44,239,46,"meta"],[236,48,239,50],[236,49,239,51,"route"],[236,54,239,56],[236,55,239,57],[236,57,239,59],[237,8,240,12],[238,8,241,12],[238,14,241,18,"subdirectoryParts"],[238,31,241,35],[238,34,241,38,"route"],[238,39,241,43],[238,40,241,44,"split"],[238,45,241,49],[238,46,241,50],[238,49,241,53],[238,50,241,54],[238,51,241,55,"slice"],[238,56,241,60],[238,57,241,61],[238,58,241,62],[238,60,241,64],[238,61,241,65],[238,62,241,66],[238,63,241,67],[239,8,242,12],[240,8,243,12],[240,12,243,16,"directory"],[240,21,243,25],[240,24,243,28,"rootDirectory"],[240,37,243,41],[241,8,244,12],[241,13,244,17],[241,19,244,23,"part"],[241,23,244,27],[241,27,244,31,"subdirectoryParts"],[241,44,244,48],[241,46,244,50],[242,10,245,16],[242,14,245,20,"subDirectory"],[242,26,245,32],[242,29,245,35,"directory"],[242,38,245,44],[242,39,245,45,"subdirectories"],[242,53,245,59],[242,54,245,60,"get"],[242,57,245,63],[242,58,245,64,"part"],[242,62,245,68],[242,63,245,69],[243,10,246,16],[244,10,247,16],[244,14,247,20],[244,15,247,21,"subDirectory"],[244,27,247,33],[244,29,247,35],[245,12,248,20,"subDirectory"],[245,24,248,32],[245,27,248,35],[246,14,249,24,"files"],[246,19,249,29],[246,21,249,31],[246,25,249,35,"Map"],[246,28,249,38],[246,29,249,39],[246,30,249,40],[247,14,250,24,"subdirectories"],[247,28,250,38],[247,30,250,40],[247,34,250,44,"Map"],[247,37,250,47],[247,38,250,48],[248,12,251,20],[248,13,251,21],[249,12,252,20,"directory"],[249,21,252,29],[249,22,252,30,"subdirectories"],[249,36,252,44],[249,37,252,45,"set"],[249,40,252,48],[249,41,252,49,"part"],[249,45,252,53],[249,47,252,55,"subDirectory"],[249,59,252,67],[249,60,252,68],[250,10,253,16],[251,10,254,16,"directory"],[251,19,254,25],[251,22,254,28,"subDirectory"],[251,34,254,40],[252,8,255,12],[253,8,256,12],[254,8,257,12,"node"],[254,12,257,16],[254,15,257,16,"Object"],[254,21,257,16],[254,22,257,16,"assign"],[254,28,257,16],[254,33,257,24,"node"],[254,37,257,28],[255,10,257,30,"route"],[256,8,257,35],[256,10,257,37],[257,8,258,12],[257,12,258,16,"meta"],[257,16,258,20],[257,17,258,21,"isLayout"],[257,25,258,29],[257,27,258,31],[258,10,259,16,"directory"],[258,19,259,25],[258,20,259,26,"layout"],[258,26,259,32],[258,31,259,37],[258,33,259,39],[259,10,260,16],[259,16,260,22,"existing"],[259,24,260,30],[259,27,260,33,"directory"],[259,36,260,42],[259,37,260,43,"layout"],[259,43,260,49],[259,44,260,50,"meta"],[259,48,260,54],[259,49,260,55,"specificity"],[259,60,260,66],[259,61,260,67],[260,10,261,16],[260,14,261,20,"existing"],[260,22,261,28],[260,24,261,30],[261,12,262,20],[262,12,263,20],[262,16,263,24,"process"],[262,23,263,31],[262,24,263,32,"env"],[262,27,263,35],[262,28,263,36,"NODE_ENV"],[262,36,263,44],[262,41,263,49],[262,53,263,61],[262,55,263,63],[263,14,264,24],[263,20,264,30],[263,24,264,34,"Error"],[263,29,264,39],[263,30,264,40],[263,46,264,56,"filePath"],[263,54,264,64],[263,64,264,74,"existing"],[263,72,264,82],[263,73,264,83,"contextKey"],[263,83,264,93],[263,112,264,122,"route"],[263,117,264,127],[263,165,264,175],[263,166,264,176],[264,12,265,20],[265,10,266,16],[265,11,266,17],[265,17,267,21],[266,12,268,20,"node"],[266,16,268,24],[266,19,268,27,"getLayoutNode"],[266,32,268,40],[266,33,268,41,"node"],[266,37,268,45],[266,39,268,47,"options"],[266,46,268,54],[266,47,268,55],[267,12,269,20,"directory"],[267,21,269,29],[267,22,269,30,"layout"],[267,28,269,36],[267,29,269,37,"meta"],[267,33,269,41],[267,34,269,42,"specificity"],[267,45,269,53],[267,46,269,54],[267,49,269,57,"node"],[267,53,269,61],[268,10,270,16],[269,8,271,12],[269,9,271,13],[269,15,272,17],[269,19,272,21,"meta"],[269,23,272,25],[269,24,272,26,"isApi"],[269,29,272,31],[269,31,272,33],[270,10,273,16],[270,16,273,22,"fileKey"],[270,23,273,29],[270,26,273,32],[270,29,273,35,"route"],[270,34,273,40],[270,40,273,46],[271,10,274,16],[271,14,274,20,"nodes"],[271,19,274,25],[271,22,274,28,"directory"],[271,31,274,37],[271,32,274,38,"files"],[271,37,274,43],[271,38,274,44,"get"],[271,41,274,47],[271,42,274,48,"fileKey"],[271,49,274,55],[271,50,274,56],[272,10,275,16],[272,14,275,20],[272,15,275,21,"nodes"],[272,20,275,26],[272,22,275,28],[273,12,276,20,"nodes"],[273,17,276,25],[273,20,276,28],[273,22,276,30],[274,12,277,20,"directory"],[274,21,277,29],[274,22,277,30,"files"],[274,27,277,35],[274,28,277,36,"set"],[274,31,277,39],[274,32,277,40,"fileKey"],[274,39,277,47],[274,41,277,49,"nodes"],[274,46,277,54],[274,47,277,55],[275,10,278,16],[276,10,279,16],[277,10,280,16],[277,16,280,22,"existing"],[277,24,280,30],[277,27,280,33,"nodes"],[277,32,280,38],[277,33,280,39],[277,34,280,40],[277,35,280,41],[278,10,281,16],[278,14,281,20,"existing"],[278,22,281,28],[278,24,281,30],[279,12,282,20],[280,12,283,20],[280,16,283,24,"process"],[280,23,283,31],[280,24,283,32,"env"],[280,27,283,35],[280,28,283,36,"NODE_ENV"],[280,36,283,44],[280,41,283,49],[280,53,283,61],[280,55,283,63],[281,14,284,24],[281,20,284,30],[281,24,284,34,"Error"],[281,29,284,39],[281,30,284,40],[281,53,284,63,"filePath"],[281,61,284,71],[281,71,284,81,"existing"],[281,79,284,89],[281,80,284,90,"contextKey"],[281,90,284,100],[281,119,284,129,"route"],[281,124,284,134],[281,172,284,182],[281,173,284,183],[282,12,285,20],[283,10,286,16],[283,11,286,17],[283,17,287,21],[284,12,288,20,"nodes"],[284,17,288,25],[284,18,288,26],[284,19,288,27],[284,20,288,28],[284,23,288,31,"node"],[284,27,288,35],[285,10,289,16],[286,8,290,12],[286,9,290,13],[286,15,291,17],[287,10,292,16],[287,14,292,20,"nodes"],[287,19,292,25],[287,22,292,28,"directory"],[287,31,292,37],[287,32,292,38,"files"],[287,37,292,43],[287,38,292,44,"get"],[287,41,292,47],[287,42,292,48,"route"],[287,47,292,53],[287,48,292,54],[288,10,293,16],[288,14,293,20],[288,15,293,21,"nodes"],[288,20,293,26],[288,22,293,28],[289,12,294,20,"nodes"],[289,17,294,25],[289,20,294,28],[289,22,294,30],[290,12,295,20,"directory"],[290,21,295,29],[290,22,295,30,"files"],[290,27,295,35],[290,28,295,36,"set"],[290,31,295,39],[290,32,295,40,"route"],[290,37,295,45],[290,39,295,47,"nodes"],[290,44,295,52],[290,45,295,53],[291,10,296,16],[292,10,297,16],[293,0,298,0],[294,0,299,0],[295,0,300,0],[296,0,301,0],[297,0,302,0],[298,10,303,16],[298,16,303,22,"existing"],[298,24,303,30],[298,27,303,33,"nodes"],[298,32,303,38],[298,33,303,39,"meta"],[298,37,303,43],[298,38,303,44,"specificity"],[298,49,303,55],[298,50,303,56],[299,10,304,16],[299,14,304,20,"existing"],[299,22,304,28],[299,24,304,30],[300,12,305,20],[301,12,306,20],[301,16,306,24,"process"],[301,23,306,31],[301,24,306,32,"env"],[301,27,306,35],[301,28,306,36,"NODE_ENV"],[301,36,306,44],[301,41,306,49],[301,53,306,61],[301,55,306,63],[302,14,307,24],[302,20,307,30],[302,24,307,34,"Error"],[302,29,307,39],[302,30,307,40],[302,50,307,60,"filePath"],[302,58,307,68],[302,68,307,78,"existing"],[302,76,307,86],[302,77,307,87,"contextKey"],[302,87,307,97],[302,116,307,126,"route"],[302,121,307,131],[302,169,307,179],[302,170,307,180],[303,12,308,20],[304,10,309,16],[304,11,309,17],[304,17,310,21],[305,12,311,20,"hasRoutes"],[305,21,311,29],[305,26,311,34],[305,30,311,38],[306,12,312,20,"nodes"],[306,17,312,25],[306,18,312,26,"meta"],[306,22,312,30],[306,23,312,31,"specificity"],[306,34,312,42],[306,35,312,43],[306,38,312,46,"node"],[306,42,312,50],[307,10,313,16],[308,8,314,12],[309,6,315,8],[310,4,316,4],[311,4,317,4],[312,4,318,4],[312,8,318,8],[312,9,318,9,"isValid"],[312,16,318,16],[312,18,318,18],[313,6,319,8],[313,13,319,15],[313,17,319,19],[314,4,320,4],[315,4,321,4],[316,0,322,0],[317,0,323,0],[318,0,324,0],[319,4,325,4],[319,8,325,8],[319,9,325,9,"rootDirectory"],[319,22,325,22],[319,23,325,23,"layout"],[319,29,325,29],[319,31,325,31],[320,6,326,8,"rootDirectory"],[320,19,326,21],[320,20,326,22,"layout"],[320,26,326,28],[320,29,326,31],[320,30,327,12,"options"],[320,37,327,19],[320,38,327,20,"getSystemRoute"],[320,52,327,34],[320,53,327,35],[321,8,328,16,"type"],[321,12,328,20],[321,14,328,22],[321,22,328,30],[322,8,329,16,"route"],[322,13,329,21],[322,15,329,23],[323,6,330,12],[323,7,330,13],[323,8,330,14],[323,9,331,9],[324,4,332,4],[325,4,333,4],[326,4,334,4],[326,8,334,8],[326,9,334,9,"options"],[326,16,334,16],[326,17,334,17,"skipGenerated"],[326,30,334,30],[326,32,334,32],[327,6,335,8],[327,10,335,12,"hasRoutes"],[327,19,335,21],[327,23,335,25,"options"],[327,30,335,32],[327,31,335,33,"sitemap"],[327,38,335,40],[327,43,335,45],[327,48,335,50],[327,50,335,52],[328,8,336,12,"appendSitemapRoute"],[328,26,336,30],[328,27,336,31,"rootDirectory"],[328,40,336,44],[328,42,336,46,"options"],[328,49,336,53],[328,50,336,54],[329,6,337,8],[330,6,338,8],[330,10,338,12,"options"],[330,17,338,19],[330,18,338,20,"notFound"],[330,26,338,28],[330,31,338,33],[330,36,338,38],[330,38,338,40],[331,8,339,12,"appendNotFoundRoute"],[331,27,339,31],[331,28,339,32,"rootDirectory"],[331,41,339,45],[331,43,339,47,"options"],[331,50,339,54],[331,51,339,55],[332,6,340,8],[333,4,341,4],[334,4,342,4],[334,11,342,11,"rootDirectory"],[334,24,342,24],[335,2,343,0],[336,2,344,0],[337,0,345,0],[338,0,346,0],[339,2,347,0],[339,11,347,9,"flattenDirectoryTreeToRoutes"],[339,39,347,37,"flattenDirectoryTreeToRoutes"],[339,40,347,38,"directory"],[339,49,347,47],[339,51,347,49,"options"],[339,58,347,56],[339,60,348,0],[340,2,349,0,"layout"],[340,8,349,6],[340,10,350,0],[341,2,351,0,"pathToRemove"],[341,14,351,12],[341,17,351,15],[341,19,351,17],[341,21,351,19],[342,4,352,4],[343,0,353,0],[344,0,354,0],[345,4,355,4],[345,8,355,8,"directory"],[345,17,355,17],[345,18,355,18,"layout"],[345,24,355,24],[345,26,355,26],[346,6,356,8],[346,12,356,14,"previousLayout"],[346,26,356,28],[346,29,356,31,"layout"],[346,35,356,37],[347,6,357,8,"layout"],[347,12,357,14],[347,15,357,17,"getMostSpecific"],[347,30,357,32],[347,31,357,33,"directory"],[347,40,357,42],[347,41,357,43,"layout"],[347,47,357,49],[347,48,357,50],[348,6,358,8],[349,6,359,8],[349,10,359,12,"previousLayout"],[349,24,359,26],[349,26,359,28],[350,8,360,12,"previousLayout"],[350,22,360,26],[350,23,360,27,"children"],[350,31,360,35],[350,32,360,36,"push"],[350,36,360,40],[350,37,360,41,"layout"],[350,43,360,47],[350,44,360,48],[351,6,361,8],[352,6,362,8],[352,10,362,12,"options"],[352,17,362,19],[352,18,362,20,"internal_stripLoadRoute"],[352,41,362,43],[352,43,362,45],[353,8,363,12],[353,15,363,19,"layout"],[353,21,363,25],[353,22,363,26,"loadRoute"],[353,31,363,35],[354,6,364,8],[355,6,365,8],[356,6,366,8],[356,12,366,14,"newRoute"],[356,20,366,22],[356,23,366,25,"layout"],[356,29,366,31],[356,30,366,32,"route"],[356,35,366,37],[356,36,366,38,"replace"],[356,43,366,45],[356,44,366,46,"pathToRemove"],[356,56,366,58],[356,58,366,60],[356,60,366,62],[356,61,366,63],[357,6,367,8,"pathToRemove"],[357,18,367,20],[357,21,367,23,"layout"],[357,27,367,29],[357,28,367,30,"route"],[357,33,367,35],[357,36,367,38],[357,39,367,41,"layout"],[357,45,367,47],[357,46,367,48,"route"],[357,51,367,53],[357,54,367,56],[357,57,367,59],[357,59,367,61],[358,6,368,8],[359,6,369,8,"layout"],[359,12,369,14],[359,13,369,15,"route"],[359,18,369,20],[359,21,369,23,"newRoute"],[359,29,369,31],[360,6,370,8,"layout"],[360,12,370,14],[360,13,370,15,"dynamic"],[360,20,370,22],[360,23,370,25,"generateDynamic"],[360,38,370,40],[360,39,370,41,"layout"],[360,45,370,47],[360,46,370,48,"contextKey"],[360,56,370,58],[360,57,370,59,"slice"],[360,62,370,64],[360,63,370,65],[360,64,370,66],[360,65,370,67],[360,66,370,68],[361,4,371,4],[362,4,372,4],[363,4,373,4],[363,8,373,8],[363,9,373,9,"layout"],[363,15,373,15],[363,17,374,8],[363,23,374,14],[363,27,374,18,"Error"],[363,32,374,23],[363,33,374,24],[363,80,374,71],[363,81,374,72],[364,4,375,4],[364,9,375,9],[364,15,375,15,"routes"],[364,21,375,21],[364,25,375,25,"directory"],[364,34,375,34],[364,35,375,35,"files"],[364,40,375,40],[364,41,375,41,"values"],[364,47,375,47],[364,48,375,48],[364,49,375,49],[364,51,375,51],[365,6,376,8],[365,12,376,14,"routeNode"],[365,21,376,23],[365,24,376,26,"getMostSpecific"],[365,39,376,41],[365,40,376,42,"routes"],[365,46,376,48],[365,47,376,49],[366,6,377,8],[367,6,378,8,"routeNode"],[367,15,378,17],[367,16,378,18,"route"],[367,21,378,23],[367,24,378,26,"routeNode"],[367,33,378,35],[367,34,378,36,"route"],[367,39,378,41],[367,40,378,42,"replace"],[367,47,378,49],[367,48,378,50,"pathToRemove"],[367,60,378,62],[367,62,378,64],[367,64,378,66],[367,65,378,67],[368,6,379,8,"routeNode"],[368,15,379,17],[368,16,379,18,"dynamic"],[368,23,379,25],[368,26,379,28,"generateDynamic"],[368,41,379,43],[368,42,379,44,"routeNode"],[368,51,379,53],[368,52,379,54,"route"],[368,57,379,59],[368,58,379,60],[369,6,380,8],[369,10,380,12,"options"],[369,17,380,19],[369,18,380,20,"internal_stripLoadRoute"],[369,41,380,43],[369,43,380,45],[370,8,381,12],[370,15,381,19,"routeNode"],[370,24,381,28],[370,25,381,29,"loadRoute"],[370,34,381,38],[371,6,382,8],[372,6,383,8,"layout"],[372,12,383,14],[372,13,383,15,"children"],[372,21,383,23],[372,22,383,24,"push"],[372,26,383,28],[372,27,383,29,"routeNode"],[372,36,383,38],[372,37,383,39],[373,4,384,4],[374,4,385,4],[375,4,386,4],[375,9,386,9],[375,15,386,15,"child"],[375,20,386,20],[375,24,386,24,"directory"],[375,33,386,33],[375,34,386,34,"subdirectories"],[375,48,386,48],[375,49,386,49,"values"],[375,55,386,55],[375,56,386,56],[375,57,386,57],[375,59,386,59],[376,6,387,8,"flattenDirectoryTreeToRoutes"],[376,34,387,36],[376,35,387,37,"child"],[376,40,387,42],[376,42,387,44,"options"],[376,49,387,51],[376,51,387,53,"layout"],[376,57,387,59],[376,59,387,61,"pathToRemove"],[376,71,387,73],[376,72,387,74],[377,4,388,4],[378,4,389,4],[378,11,389,11,"layout"],[378,17,389,17],[379,2,390,0],[380,2,391,0],[380,11,391,9,"getFileMeta"],[380,22,391,20,"getFileMeta"],[380,23,391,21,"originalKey"],[380,34,391,32],[380,36,391,34,"options"],[380,43,391,41],[380,45,391,43,"redirects"],[380,54,391,52],[380,56,391,54,"rewrites"],[380,64,391,62],[380,66,391,64],[381,4,392,4],[382,4,393,4],[382,10,393,10,"key"],[382,13,393,13],[382,16,393,16],[382,17,393,17],[382,18,393,18],[382,20,393,20,"matchers_1"],[382,30,393,30],[382,31,393,31,"removeSupportedExtensions"],[382,56,393,56],[382,58,393,58],[382,59,393,59],[382,60,393,60],[382,62,393,62,"matchers_1"],[382,72,393,72],[382,73,393,73,"removeFileSystemDots"],[382,93,393,93],[382,95,393,95,"originalKey"],[382,106,393,106],[382,107,393,107],[382,108,393,108],[383,4,394,4],[383,8,394,8,"route"],[383,13,394,13],[383,16,394,16,"key"],[383,19,394,19],[384,4,395,4],[384,10,395,10,"parts"],[384,15,395,15],[384,18,395,18],[384,19,395,19],[384,20,395,20],[384,22,395,22,"matchers_1"],[384,32,395,32],[384,33,395,33,"removeFileSystemDots"],[384,53,395,53],[384,55,395,55,"originalKey"],[384,66,395,66],[384,67,395,67],[384,68,395,68,"split"],[384,73,395,73],[384,74,395,74],[384,77,395,77],[384,78,395,78],[385,4,396,4],[385,10,396,10,"filename"],[385,18,396,18],[385,21,396,21,"parts"],[385,26,396,26],[385,27,396,27,"parts"],[385,32,396,32],[385,33,396,33,"length"],[385,39,396,39],[385,42,396,42],[385,43,396,43],[385,44,396,44],[386,4,397,4],[386,10,397,10],[386,11,397,11,"filenameWithoutExtensions"],[386,36,397,36],[386,38,397,38,"platformExtension"],[386,55,397,55],[386,56,397,56],[386,59,397,59],[386,60,397,60],[386,61,397,61],[386,63,397,63,"matchers_1"],[386,73,397,73],[386,74,397,74,"removeSupportedExtensions"],[386,99,397,99],[386,101,397,101,"filename"],[386,109,397,109],[386,110,397,110],[386,111,397,111,"split"],[386,116,397,116],[386,117,397,117],[386,120,397,120],[386,121,397,121],[387,4,398,4],[387,10,398,10,"isLayout"],[387,18,398,18],[387,21,398,21,"filenameWithoutExtensions"],[387,46,398,46],[387,51,398,51],[387,60,398,60],[388,4,399,4],[388,10,399,10,"isApi"],[388,15,399,15],[388,18,399,18,"originalKey"],[388,29,399,29],[388,30,399,30,"match"],[388,35,399,35],[388,36,399,36],[388,61,399,61],[388,62,399,62],[389,4,400,4],[389,8,400,8,"filenameWithoutExtensions"],[389,33,400,33],[389,34,400,34,"startsWith"],[389,44,400,44],[389,45,400,45],[389,48,400,48],[389,49,400,49],[389,53,400,53,"filenameWithoutExtensions"],[389,78,400,78],[389,79,400,79,"endsWith"],[389,87,400,87],[389,88,400,88],[389,91,400,91],[389,92,400,92],[389,94,400,94],[390,6,401,8],[390,12,401,14],[390,16,401,18,"Error"],[390,21,401,23],[390,22,401,24],[390,39,401,41,"originalKey"],[390,50,401,52],[390,93,401,95],[390,94,401,96],[391,4,402,4],[392,4,403,4],[393,4,404,4],[393,8,404,8],[393,9,404,9,"isApi"],[393,14,404,14],[393,18,404,18,"filename"],[393,26,404,26],[393,27,404,27,"startsWith"],[393,37,404,37],[393,38,404,38],[393,41,404,41],[393,42,404,42],[393,46,404,46,"filenameWithoutExtensions"],[393,71,404,71],[393,76,404,76],[393,88,404,88],[393,90,404,90],[394,6,405,8],[394,12,405,14,"renamedRoute"],[394,24,405,26],[394,27,405,29],[394,28,405,30],[394,31,405,33,"parts"],[394,36,405,38],[394,37,405,39,"slice"],[394,42,405,44],[394,43,405,45],[394,44,405,46],[394,46,405,48],[394,47,405,49],[394,48,405,50],[394,49,405,51],[394,51,405,53,"filename"],[394,59,405,61],[394,60,405,62,"slice"],[394,65,405,67],[394,66,405,68],[394,67,405,69],[394,68,405,70],[394,69,405,71],[394,70,405,72,"join"],[394,74,405,76],[394,75,405,77],[394,78,405,80],[394,79,405,81],[395,6,406,8],[395,12,406,14],[395,16,406,18,"Error"],[395,21,406,23],[395,22,406,24],[395,39,406,41,"originalKey"],[395,50,406,52],[395,122,406,124,"renamedRoute"],[395,134,406,136],[395,137,406,139],[395,138,406,140],[396,4,407,4],[397,4,408,4],[397,8,408,8,"specificity"],[397,19,408,19],[397,22,408,22],[397,23,408,23],[398,4,409,4],[398,10,409,10,"hasPlatformExtension"],[398,30,409,30],[398,33,409,33,"validPlatforms"],[398,47,409,47],[398,48,409,48,"has"],[398,51,409,51],[398,52,409,52,"platformExtension"],[398,69,409,69],[398,70,409,70],[399,4,410,4],[399,10,410,10,"usePlatformRoutes"],[399,27,410,27],[399,30,410,30,"options"],[399,37,410,37],[399,38,410,38,"platformRoutes"],[399,52,410,52],[399,56,410,56],[399,60,410,60],[400,4,411,4],[400,8,411,8,"hasPlatformExtension"],[400,28,411,28],[400,30,411,30],[401,6,412,8],[401,10,412,12],[401,11,412,13,"usePlatformRoutes"],[401,28,412,30],[401,30,412,32],[402,8,413,12],[403,8,414,12,"specificity"],[403,19,414,23],[403,22,414,26],[403,23,414,27],[403,24,414,28],[404,6,415,8],[404,7,415,9],[404,13,416,13],[404,17,416,17],[404,18,416,18,"options"],[404,25,416,25],[404,26,416,26,"platform"],[404,34,416,34],[404,36,416,36],[405,8,417,12],[406,8,418,12],[407,8,419,12,"specificity"],[407,19,419,23],[407,22,419,26],[407,23,419,27],[407,24,419,28],[408,6,420,8],[408,7,420,9],[408,13,421,13],[408,17,421,17,"platformExtension"],[408,34,421,34],[408,39,421,39,"options"],[408,46,421,46],[408,47,421,47,"platform"],[408,55,421,55],[408,57,421,57],[409,8,422,12],[410,8,423,12,"specificity"],[410,19,423,23],[410,22,423,26],[410,23,423,27],[411,6,424,8],[411,7,424,9],[411,13,425,13],[411,17,425,17,"platformExtension"],[411,34,425,34],[411,39,425,39],[411,47,425,47],[411,51,425,51,"options"],[411,58,425,58],[411,59,425,59,"platform"],[411,67,425,67],[411,72,425,72],[411,77,425,77],[411,79,425,79],[412,8,426,12],[413,8,427,12,"specificity"],[413,19,427,23],[413,22,427,26],[413,23,427,27],[414,6,428,8],[414,7,428,9],[414,13,429,13],[414,17,429,17,"platformExtension"],[414,34,429,34],[414,39,429,39,"options"],[414,46,429,46],[414,47,429,47,"platform"],[414,55,429,55],[414,57,429,57],[415,8,430,12],[416,8,431,12],[417,8,432,12,"specificity"],[417,19,432,23],[417,22,432,26],[417,23,432,27],[417,24,432,28],[418,6,433,8],[419,6,434,8],[419,10,434,12,"isApi"],[419,15,434,17],[419,19,434,21,"specificity"],[419,30,434,32],[419,35,434,37],[419,36,434,38],[419,38,434,40],[420,8,435,12],[420,14,435,18],[420,18,435,22,"Error"],[420,23,435,27],[420,24,435,28],[420,87,435,91,"platformExtension"],[420,104,435,108],[420,115,435,119,"originalKey"],[420,126,435,130],[420,129,435,133],[420,130,435,134],[421,6,436,8],[422,6,437,8,"route"],[422,11,437,13],[422,14,437,16,"route"],[422,19,437,21],[422,20,437,22,"replace"],[422,27,437,29],[422,28,437,30],[422,32,437,34,"RegExp"],[422,38,437,40],[422,39,437,41],[422,43,437,45,"platformExtension"],[422,60,437,62],[422,63,437,65],[422,64,437,66],[422,66,437,68],[422,68,437,70],[422,69,437,71],[423,4,438,4],[424,4,439,4],[424,11,439,11],[425,6,440,8,"route"],[425,11,440,13],[426,6,441,8,"specificity"],[426,17,441,19],[427,6,442,8,"isLayout"],[427,14,442,16],[428,6,443,8,"isApi"],[428,11,443,13],[429,6,444,8,"isRedirect"],[429,16,444,18],[429,18,444,20,"key"],[429,21,444,23],[429,25,444,27,"redirects"],[429,34,444,36],[430,6,445,8,"isRewrite"],[430,15,445,17],[430,17,445,19,"key"],[430,20,445,22],[430,24,445,26,"rewrites"],[431,4,446,4],[431,5,446,5],[432,2,447,0],[433,2,448,0],[433,11,448,9,"getIgnoreList"],[433,24,448,22,"getIgnoreList"],[433,25,448,23,"options"],[433,32,448,30],[433,34,448,32],[434,4,449,4],[434,10,449,10,"ignore"],[434,16,449,16],[434,19,449,19],[434,20,449,20],[434,43,449,43],[434,45,449,45],[434,49,449,49,"options"],[434,56,449,56],[434,58,449,58,"ignore"],[434,64,449,64],[434,68,449,68],[434,70,449,70],[434,71,449,71],[434,72,449,72],[435,4,450,4],[435,8,450,8,"options"],[435,15,450,15],[435,17,450,17,"preserveApiRoutes"],[435,34,450,34],[435,39,450,39],[435,43,450,43],[435,45,450,45],[436,6,451,8,"ignore"],[436,12,451,14],[436,13,451,15,"push"],[436,17,451,19],[436,18,451,20],[436,35,451,37],[436,36,451,38],[437,4,452,4],[438,4,453,4],[438,11,453,11,"ignore"],[438,17,453,17],[439,2,454,0],[440,2,455,0],[441,0,456,0],[442,0,457,0],[443,0,458,0],[444,0,459,0],[445,2,460,0],[445,11,460,9,"extrapolateGroups"],[445,28,460,26,"extrapolateGroups"],[445,29,460,27,"key"],[445,32,460,30],[445,34,460,32,"keys"],[445,38,460,36],[445,41,460,39],[445,45,460,43,"Set"],[445,48,460,46],[445,49,460,47],[445,50,460,48],[445,52,460,50],[446,4,461,4],[446,10,461,10,"match"],[446,15,461,15],[446,18,461,18],[446,19,461,19],[446,20,461,20],[446,22,461,22,"matchers_1"],[446,32,461,32],[446,33,461,33,"matchArrayGroupName"],[446,52,461,52],[446,54,461,54,"key"],[446,57,461,57],[446,58,461,58],[447,4,462,4],[447,8,462,8],[447,9,462,9,"match"],[447,14,462,14],[447,16,462,16],[448,6,463,8,"keys"],[448,10,463,12],[448,11,463,13,"add"],[448,14,463,16],[448,15,463,17,"key"],[448,18,463,20],[448,19,463,21],[449,6,464,8],[449,13,464,15,"keys"],[449,17,464,19],[450,4,465,4],[451,4,466,4],[451,10,466,10,"groups"],[451,16,466,16],[451,19,466,19,"match"],[451,24,466,24],[451,25,466,25,"split"],[451,30,466,30],[451,31,466,31],[451,34,466,34],[451,35,466,35],[452,4,467,4],[452,10,467,10,"groupsSet"],[452,19,467,19],[452,22,467,22],[452,26,467,26,"Set"],[452,29,467,29],[452,30,467,30,"groups"],[452,36,467,36],[452,37,467,37],[453,4,468,4],[453,8,468,8,"groupsSet"],[453,17,468,17],[453,18,468,18,"size"],[453,22,468,22],[453,27,468,27,"groups"],[453,33,468,33],[453,34,468,34,"length"],[453,40,468,40],[453,42,468,42],[454,6,469,8],[454,12,469,14],[454,16,469,18,"Error"],[454,21,469,23],[454,22,469,24],[454,75,469,77,"groups"],[454,81,469,83],[454,90,469,92,"key"],[454,93,469,95],[454,97,469,99],[454,98,469,100],[455,4,470,4],[456,4,471,4],[456,8,471,8,"groups"],[456,14,471,14],[456,15,471,15,"length"],[456,21,471,21],[456,26,471,26],[456,27,471,27],[456,29,471,29],[457,6,472,8,"keys"],[457,10,472,12],[457,11,472,13,"add"],[457,14,472,16],[457,15,472,17,"key"],[457,18,472,20],[457,19,472,21],[458,6,473,8],[458,13,473,15,"keys"],[458,17,473,19],[459,4,474,4],[460,4,475,4],[460,9,475,9],[460,15,475,15,"group"],[460,20,475,20],[460,24,475,24,"groups"],[460,30,475,30],[460,32,475,32],[461,6,476,8,"extrapolateGroups"],[461,23,476,25],[461,24,476,26,"key"],[461,27,476,29],[461,28,476,30,"replace"],[461,35,476,37],[461,36,476,38,"match"],[461,41,476,43],[461,43,476,45,"group"],[461,48,476,50],[461,49,476,51,"trim"],[461,53,476,55],[461,54,476,56],[461,55,476,57],[461,56,476,58],[461,58,476,60,"keys"],[461,62,476,64],[461,63,476,65],[462,4,477,4],[463,4,478,4],[463,11,478,11,"keys"],[463,15,478,15],[464,2,479,0],[465,2,480,0],[465,11,480,9,"generateDynamic"],[465,26,480,24,"generateDynamic"],[465,27,480,25,"path"],[465,31,480,29],[465,33,480,31],[466,4,481,4],[466,10,481,10,"dynamic"],[466,17,481,17],[466,20,481,20,"path"],[466,24,481,24],[466,25,482,9,"split"],[466,30,482,14],[466,31,482,15],[466,34,482,18],[466,35,482,19],[466,36,483,9,"map"],[466,39,483,12],[466,40,483,14,"part"],[466,44,483,18],[466,48,483,23],[467,6,484,8],[467,10,484,12,"part"],[467,14,484,16],[467,19,484,21],[467,31,484,33],[467,33,484,35],[468,8,485,12],[468,15,485,19],[469,10,486,16,"name"],[469,14,486,20],[469,16,486,22],[469,28,486,34],[470,10,487,16,"deep"],[470,14,487,20],[470,16,487,22],[470,20,487,26],[471,10,488,16,"notFound"],[471,18,488,24],[471,20,488,26],[472,8,489,12],[472,9,489,13],[473,6,490,8],[474,6,491,8],[474,12,491,14,"deepDynamicName"],[474,27,491,29],[474,30,491,32],[474,31,491,33],[474,32,491,34],[474,34,491,36,"matchers_1"],[474,44,491,46],[474,45,491,47,"matchDeepDynamicRouteName"],[474,70,491,72],[474,72,491,74,"part"],[474,76,491,78],[474,77,491,79],[475,6,492,8],[475,12,492,14,"dynamicName"],[475,23,492,25],[475,26,492,28,"deepDynamicName"],[475,41,492,43],[475,45,492,47],[475,46,492,48],[475,47,492,49],[475,49,492,51,"matchers_1"],[475,59,492,61],[475,60,492,62,"matchDynamicName"],[475,76,492,78],[475,78,492,80,"part"],[475,82,492,84],[475,83,492,85],[476,6,493,8],[476,10,493,12],[476,11,493,13,"dynamicName"],[476,22,493,24],[476,24,494,12],[476,31,494,19],[476,35,494,23],[477,6,495,8],[477,13,495,15],[478,8,495,17,"name"],[478,12,495,21],[478,14,495,23,"dynamicName"],[478,25,495,34],[479,8,495,36,"deep"],[479,12,495,40],[479,14,495,42],[479,15,495,43],[479,16,495,44,"deepDynamicName"],[480,6,495,60],[480,7,495,61],[481,4,496,4],[481,5,496,5],[481,6,496,6],[481,7,497,9,"filter"],[481,13,497,15],[481,14,497,17,"part"],[481,18,497,21],[481,22,497,26],[481,23,497,27],[481,24,497,28,"part"],[481,28,497,32],[481,29,497,33],[482,4,498,4],[482,11,498,11,"dynamic"],[482,18,498,18],[482,19,498,19,"length"],[482,25,498,25],[482,30,498,30],[482,31,498,31],[482,34,498,34],[482,38,498,38],[482,41,498,41,"dynamic"],[482,48,498,48],[483,2,499,0],[484,2,500,0],[484,11,500,9,"appendSitemapRoute"],[484,29,500,27,"appendSitemapRoute"],[484,30,500,28,"directory"],[484,39,500,37],[484,41,500,39,"options"],[484,48,500,46],[484,50,500,48],[485,4,501,4],[485,8,501,8],[485,9,501,9,"directory"],[485,18,501,18],[485,19,501,19,"files"],[485,24,501,24],[485,25,501,25,"has"],[485,28,501,28],[485,29,501,29],[485,39,501,39],[485,40,501,40],[485,44,501,44,"options"],[485,51,501,51],[485,52,501,52,"getSystemRoute"],[485,66,501,66],[485,68,501,68],[486,6,502,8,"directory"],[486,15,502,17],[486,16,502,18,"files"],[486,21,502,23],[486,22,502,24,"set"],[486,25,502,27],[486,26,502,28],[486,36,502,38],[486,38,502,40],[486,39,503,12,"options"],[486,46,503,19],[486,47,503,20,"getSystemRoute"],[486,61,503,34],[486,62,503,35],[487,8,504,16,"type"],[487,12,504,20],[487,14,504,22],[487,21,504,29],[488,8,505,16,"route"],[488,13,505,21],[488,15,505,23],[489,6,506,12],[489,7,506,13],[489,8,506,14],[489,9,507,9],[489,10,507,10],[490,4,508,4],[491,2,509,0],[492,2,510,0],[492,11,510,9,"appendNotFoundRoute"],[492,30,510,28,"appendNotFoundRoute"],[492,31,510,29,"directory"],[492,40,510,38],[492,42,510,40,"options"],[492,49,510,47],[492,51,510,49],[493,4,511,4],[493,8,511,8],[493,9,511,9,"directory"],[493,18,511,18],[493,19,511,19,"files"],[493,24,511,24],[493,25,511,25,"has"],[493,28,511,28],[493,29,511,29],[493,41,511,41],[493,42,511,42],[493,46,511,46,"options"],[493,53,511,53],[493,54,511,54,"getSystemRoute"],[493,68,511,68],[493,70,511,70],[494,6,512,8,"directory"],[494,15,512,17],[494,16,512,18,"files"],[494,21,512,23],[494,22,512,24,"set"],[494,25,512,27],[494,26,512,28],[494,38,512,40],[494,40,512,42],[494,41,513,12,"options"],[494,48,513,19],[494,49,513,20,"getSystemRoute"],[494,63,513,34],[494,64,513,35],[495,8,514,16,"type"],[495,12,514,20],[495,14,514,22],[495,21,514,29],[496,8,515,16,"route"],[496,13,515,21],[496,15,515,23],[497,6,516,12],[497,7,516,13],[497,8,516,14],[497,9,517,9],[497,10,517,10],[498,4,518,4],[499,2,519,0],[500,2,520,0],[500,11,520,9,"getLayoutNode"],[500,24,520,22,"getLayoutNode"],[500,25,520,23,"node"],[500,29,520,27],[500,31,520,29,"options"],[500,38,520,36],[500,40,520,38],[501,4,521,4],[502,0,522,0],[503,0,523,0],[504,0,524,0],[505,4,525,4],[506,4,526,4],[506,10,526,10,"groupName"],[506,19,526,19],[506,22,526,22],[506,23,526,23],[506,24,526,24],[506,26,526,26,"matchers_1"],[506,36,526,36],[506,37,526,37,"matchLastGroupName"],[506,55,526,55],[506,57,526,57,"node"],[506,61,526,61],[506,62,526,62,"route"],[506,67,526,67],[506,68,526,68],[507,4,527,4],[507,10,527,10,"childMatchingGroup"],[507,28,527,28],[507,31,527,31,"node"],[507,35,527,35],[507,36,527,36,"children"],[507,44,527,44],[507,45,527,45,"find"],[507,49,527,49],[507,50,527,51,"child"],[507,55,527,56],[507,59,527,61],[508,6,528,8],[508,13,528,15,"child"],[508,18,528,20],[508,19,528,21,"route"],[508,24,528,26],[508,25,528,27,"replace"],[508,32,528,34],[508,33,528,35],[508,43,528,45],[508,45,528,47],[508,47,528,49],[508,48,528,50],[508,53,528,55,"groupName"],[508,62,528,64],[509,4,529,4],[509,5,529,5],[509,6,529,6],[510,4,530,4],[510,8,530,8,"anchor"],[510,14,530,14],[510,17,530,17,"childMatchingGroup"],[510,35,530,35],[510,37,530,37,"route"],[510,42,530,42],[511,4,531,4],[511,10,531,10,"loaded"],[511,16,531,16],[511,19,531,19,"node"],[511,23,531,23],[511,24,531,24,"loadRoute"],[511,33,531,33],[511,34,531,34],[511,35,531,35],[512,4,532,4],[512,8,532,8,"loaded"],[512,14,532,14],[512,16,532,16,"unstable_settings"],[512,33,532,33],[512,35,532,35],[513,6,533,8],[513,10,533,12],[514,8,534,12],[515,8,535,12,"anchor"],[515,14,535,18],[515,17,536,16,"loaded"],[515,23,536,22],[515,24,536,23,"unstable_settings"],[515,41,536,40],[515,42,536,41,"anchor"],[515,48,536,47],[515,52,536,51,"loaded"],[515,58,536,57],[515,59,536,58,"unstable_settings"],[515,76,536,75],[515,77,536,76,"initialRouteName"],[515,93,536,92],[515,97,536,96,"anchor"],[515,103,536,102],[516,6,537,8],[516,7,537,9],[516,8,538,8],[516,15,538,15,"error"],[516,20,538,20],[516,22,538,22],[517,8,539,12],[517,12,539,16,"error"],[517,17,539,21],[517,29,539,33,"Error"],[517,34,539,38],[517,36,539,40],[518,10,540,16],[518,14,540,20],[518,15,540,21,"error"],[518,20,540,26],[518,21,540,27,"message"],[518,28,540,34],[518,29,540,35,"match"],[518,34,540,40],[518,35,540,41],[518,72,540,78],[518,73,540,79],[518,75,540,81],[519,12,541,20],[519,18,541,26,"error"],[519,23,541,31],[520,10,542,16],[521,8,543,12],[522,6,544,8],[523,6,545,8],[523,10,545,12,"groupName"],[523,19,545,21],[523,21,545,23],[524,8,546,12],[525,8,547,12],[525,14,547,18,"groupSpecificInitialRouteName"],[525,43,547,47],[525,46,547,50,"loaded"],[525,52,547,56],[525,53,547,57,"unstable_settings"],[525,70,547,74],[525,73,547,77,"groupName"],[525,82,547,86],[525,83,547,87],[525,85,547,89,"anchor"],[525,91,547,95],[525,95,548,16,"loaded"],[525,101,548,22],[525,102,548,23,"unstable_settings"],[525,119,548,40],[525,122,548,43,"groupName"],[525,131,548,52],[525,132,548,53],[525,134,548,55,"initialRouteName"],[525,150,548,71],[526,8,549,12,"anchor"],[526,14,549,18],[526,17,549,21,"groupSpecificInitialRouteName"],[526,46,549,50],[526,50,549,54,"anchor"],[526,56,549,60],[527,6,550,8],[528,4,551,4],[529,4,552,4],[529,11,552,4,"Object"],[529,17,552,4],[529,18,552,4,"assign"],[529,24,552,4],[529,29,553,11,"node"],[529,33,553,15],[530,6,554,8,"route"],[530,11,554,13],[530,13,554,15,"node"],[530,17,554,19],[530,18,554,20,"route"],[530,23,554,25],[530,24,554,26,"replace"],[530,31,554,33],[530,32,554,34],[530,45,554,47],[530,47,554,49],[530,49,554,51],[530,50,554,52],[531,6,555,8,"children"],[531,14,555,16],[531,16,555,18],[531,18,555,20],[532,6,555,22],[533,6,556,8,"initialRouteName"],[533,22,556,24],[533,24,556,26,"anchor"],[534,4,556,32],[535,2,558,0],[536,2,559,0],[536,11,559,9,"crawlAndAppendInitialRoutesAndEntryFiles"],[536,51,559,49,"crawlAndAppendInitialRoutesAndEntryFiles"],[536,52,559,50,"node"],[536,56,559,54],[536,58,559,56,"options"],[536,65,559,63],[536,67,559,65,"entryPoints"],[536,78,559,76],[536,81,559,79],[536,83,559,81],[536,85,559,83],[537,4,560,4],[537,8,560,8,"node"],[537,12,560,12],[537,13,560,13,"type"],[537,17,560,17],[537,22,560,22],[537,29,560,29],[537,31,560,31],[538,6,561,8,"node"],[538,10,561,12],[538,11,561,13,"entryPoints"],[538,22,561,24],[538,25,561,27],[538,26,561,28],[538,29,561,31],[538,33,561,35,"Set"],[538,36,561,38],[538,37,561,39],[538,38,561,40],[538,41,561,43,"entryPoints"],[538,52,561,54],[538,54,561,56,"node"],[538,58,561,60],[538,59,561,61,"contextKey"],[538,69,561,71],[538,70,561,72],[538,71,561,73],[538,72,561,74],[539,4,562,4],[539,5,562,5],[539,11,563,9],[539,15,563,13,"node"],[539,19,563,17],[539,20,563,18,"type"],[539,24,563,22],[539,29,563,27],[539,39,563,37],[539,41,563,39],[540,6,564,8,"node"],[540,10,564,12],[540,11,564,13,"entryPoints"],[540,22,564,24],[540,25,564,27],[540,26,564,28],[540,29,564,31],[540,33,564,35,"Set"],[540,36,564,38],[540,37,564,39],[540,38,564,40],[540,41,564,43,"entryPoints"],[540,52,564,54],[540,54,564,56,"node"],[540,58,564,60],[540,59,564,61,"destinationContextKey"],[540,80,564,82],[540,81,564,83],[540,82,564,84],[540,83,564,85],[541,4,565,4],[541,5,565,5],[541,11,566,9],[541,15,566,13,"node"],[541,19,566,17],[541,20,566,18,"type"],[541,24,566,22],[541,29,566,27],[541,37,566,35],[541,39,566,37],[542,6,567,8],[542,10,567,12],[542,11,567,13,"node"],[542,15,567,17],[542,16,567,18,"children"],[542,24,567,26],[542,26,567,28],[543,8,568,12],[543,14,568,18],[543,18,568,22,"Error"],[543,23,568,27],[543,24,568,28],[543,35,568,39,"node"],[543,39,568,43],[543,40,568,44,"contextKey"],[543,50,568,54],[543,87,568,91],[543,88,568,92],[544,6,569,8],[545,6,570,8],[546,6,571,8,"entryPoints"],[546,17,571,19],[546,20,571,22],[546,21,571,23],[546,24,571,26,"entryPoints"],[546,35,571,37],[546,37,571,39,"node"],[546,41,571,43],[546,42,571,44,"contextKey"],[546,52,571,54],[546,53,571,55],[547,6,572,8],[548,0,573,0],[549,0,574,0],[550,0,575,0],[551,0,576,0],[552,0,577,0],[553,6,578,8],[553,12,578,14,"groupName"],[553,21,578,23],[553,24,578,26],[553,25,578,27],[553,26,578,28],[553,28,578,30,"matchers_1"],[553,38,578,40],[553,39,578,41,"matchGroupName"],[553,53,578,55],[553,55,578,57,"node"],[553,59,578,61],[553,60,578,62,"route"],[553,65,578,67],[553,66,578,68],[554,6,579,8],[554,12,579,14,"childMatchingGroup"],[554,30,579,32],[554,33,579,35,"node"],[554,37,579,39],[554,38,579,40,"children"],[554,46,579,48],[554,47,579,49,"find"],[554,51,579,53],[554,52,579,55,"child"],[554,57,579,60],[554,61,579,65],[555,8,580,12],[555,15,580,19,"child"],[555,20,580,24],[555,21,580,25,"route"],[555,26,580,30],[555,27,580,31,"replace"],[555,34,580,38],[555,35,580,39],[555,45,580,49],[555,47,580,51],[555,49,580,53],[555,50,580,54],[555,55,580,59,"groupName"],[555,64,580,68],[556,6,581,8],[556,7,581,9],[556,8,581,10],[557,6,582,8],[557,10,582,12,"anchor"],[557,16,582,18],[557,19,582,21,"childMatchingGroup"],[557,37,582,39],[557,39,582,41,"route"],[557,44,582,46],[558,6,583,8],[559,6,584,8],[559,10,584,12],[559,11,584,13,"options"],[559,18,584,20],[559,19,584,21,"internal_stripLoadRoute"],[559,42,584,44],[559,44,584,46],[560,8,585,12],[560,14,585,18,"loaded"],[560,20,585,24],[560,23,585,27,"node"],[560,27,585,31],[560,28,585,32,"loadRoute"],[560,37,585,41],[560,38,585,42],[560,39,585,43],[561,8,586,12],[561,12,586,16,"loaded"],[561,18,586,22],[561,20,586,24,"unstable_settings"],[561,37,586,41],[561,39,586,43],[562,10,587,16],[562,14,587,20],[563,12,588,20],[564,12,589,20,"anchor"],[564,18,589,26],[564,21,590,24,"loaded"],[564,27,590,30],[564,28,590,31,"unstable_settings"],[564,45,590,48],[564,46,590,49,"anchor"],[564,52,590,55],[564,56,590,59,"loaded"],[564,62,590,65],[564,63,590,66,"unstable_settings"],[564,80,590,83],[564,81,590,84,"initialRouteName"],[564,97,590,100],[564,101,590,104,"anchor"],[564,107,590,110],[565,10,591,16],[565,11,591,17],[565,12,592,16],[565,19,592,23,"error"],[565,24,592,28],[565,26,592,30],[566,12,593,20],[566,16,593,24,"error"],[566,21,593,29],[566,33,593,41,"Error"],[566,38,593,46],[566,40,593,48],[567,14,594,24],[567,18,594,28],[567,19,594,29,"error"],[567,24,594,34],[567,25,594,35,"message"],[567,32,594,42],[567,33,594,43,"match"],[567,38,594,48],[567,39,594,49],[567,76,594,86],[567,77,594,87],[567,79,594,89],[568,16,595,28],[568,22,595,34,"error"],[568,27,595,39],[569,14,596,24],[570,12,597,20],[571,10,598,16],[572,10,599,16],[572,14,599,20,"groupName"],[572,23,599,29],[572,25,599,31],[573,12,600,20],[574,12,601,20],[574,18,601,26,"groupSpecificInitialRouteName"],[574,47,601,55],[574,50,601,58,"loaded"],[574,56,601,64],[574,57,601,65,"unstable_settings"],[574,74,601,82],[574,77,601,85,"groupName"],[574,86,601,94],[574,87,601,95],[574,89,601,97,"anchor"],[574,95,601,103],[574,99,602,24,"loaded"],[574,105,602,30],[574,106,602,31,"unstable_settings"],[574,123,602,48],[574,126,602,51,"groupName"],[574,135,602,60],[574,136,602,61],[574,138,602,63,"initialRouteName"],[574,154,602,79],[575,12,603,20,"anchor"],[575,18,603,26],[575,21,603,29,"groupSpecificInitialRouteName"],[575,50,603,58],[575,54,603,62,"anchor"],[575,60,603,68],[576,10,604,16],[577,8,605,12],[578,6,606,8],[579,6,607,8],[579,10,607,12,"anchor"],[579,16,607,18],[579,18,607,20],[580,8,608,12],[580,14,608,18,"anchorRoute"],[580,25,608,29],[580,28,608,32,"node"],[580,32,608,36],[580,33,608,37,"children"],[580,41,608,45],[580,42,608,46,"find"],[580,46,608,50],[580,47,608,52,"child"],[580,52,608,57],[580,56,608,62,"child"],[580,61,608,67],[580,62,608,68,"route"],[580,67,608,73],[580,72,608,78,"anchor"],[580,78,608,84],[580,79,608,85],[581,8,609,12],[581,12,609,16],[581,13,609,17,"anchorRoute"],[581,24,609,28],[581,26,609,30],[582,10,610,16],[582,16,610,22,"validAnchorRoutes"],[582,33,610,39],[582,36,610,42,"node"],[582,40,610,46],[582,41,610,47,"children"],[582,49,610,55],[582,50,611,21,"filter"],[582,56,611,27],[582,57,611,29,"child"],[582,62,611,34],[582,66,611,39],[582,67,611,40,"child"],[582,72,611,45],[582,73,611,46,"generated"],[582,82,611,55],[582,83,611,56],[582,84,612,21,"map"],[582,87,612,24],[582,88,612,26,"child"],[582,93,612,31],[582,97,612,36],[582,101,612,40,"child"],[582,106,612,45],[582,107,612,46,"route"],[582,112,612,51],[582,115,612,54],[582,116,612,55],[582,117,613,21,"join"],[582,121,613,25],[582,122,613,26],[582,126,613,30],[582,127,613,31],[583,10,614,16],[583,14,614,20,"groupName"],[583,23,614,29],[583,25,614,31],[584,12,615,20],[584,18,615,26],[584,22,615,30,"Error"],[584,27,615,35],[584,28,615,36],[584,38,615,46,"node"],[584,42,615,50],[584,43,615,51,"contextKey"],[584,53,615,61],[584,77,615,85,"anchor"],[584,83,615,91],[584,100,615,108,"groupName"],[584,109,615,117],[584,135,615,143,"validAnchorRoutes"],[584,152,615,160],[584,154,615,162],[584,155,615,163],[585,10,616,16],[585,11,616,17],[585,17,617,21],[586,12,618,20],[586,18,618,26],[586,22,618,30,"Error"],[586,27,618,35],[586,28,618,36],[586,38,618,46,"node"],[586,42,618,50],[586,43,618,51,"contextKey"],[586,53,618,61],[586,77,618,85,"anchor"],[586,83,618,91],[586,108,618,116,"validAnchorRoutes"],[586,125,618,133],[586,127,618,135],[586,128,618,136],[587,10,619,16],[588,8,620,12],[589,8,621,12],[590,8,622,12,"node"],[590,12,622,16],[590,13,622,17,"initialRouteName"],[590,29,622,33],[590,32,622,36,"anchor"],[590,38,622,42],[591,8,623,12,"entryPoints"],[591,19,623,23],[591,20,623,24,"push"],[591,24,623,28],[591,25,623,29,"anchorRoute"],[591,36,623,40],[591,37,623,41,"contextKey"],[591,47,623,51],[591,48,623,52],[592,6,624,8],[593,6,625,8],[593,11,625,13],[593,17,625,19,"child"],[593,22,625,24],[593,26,625,28,"node"],[593,30,625,32],[593,31,625,33,"children"],[593,39,625,41],[593,41,625,43],[594,8,626,12,"crawlAndAppendInitialRoutesAndEntryFiles"],[594,48,626,52],[594,49,626,53,"child"],[594,54,626,58],[594,56,626,60,"options"],[594,63,626,67],[594,65,626,69,"entryPoints"],[594,76,626,80],[594,77,626,81],[595,6,627,8],[596,4,628,4],[597,2,629,0],[598,2,630,0],[598,11,630,9,"getMostSpecific"],[598,26,630,24,"getMostSpecific"],[598,27,630,25,"routes"],[598,33,630,31],[598,35,630,33],[599,4,631,4],[599,10,631,10,"route"],[599,15,631,15],[599,18,631,18,"routes"],[599,24,631,24],[599,25,631,25,"routes"],[599,31,631,31],[599,32,631,32,"length"],[599,38,631,38],[599,41,631,41],[599,42,631,42],[599,43,631,43],[600,4,632,4],[600,8,632,8],[600,9,632,9,"routes"],[600,15,632,15],[600,16,632,16],[600,17,632,17],[600,18,632,18],[600,20,632,20],[601,6,633,8],[601,12,633,14],[601,16,633,18,"Error"],[601,21,633,23],[601,22,633,24],[601,34,633,36,"route"],[601,39,633,41],[601,40,633,42,"contextKey"],[601,50,633,52],[601,120,633,122],[601,121,633,123],[602,4,634,4],[603,4,635,4],[604,4,636,4],[605,4,637,4],[605,11,637,11,"routes"],[605,17,637,17],[605,18,637,18,"routes"],[605,24,637,24],[605,25,637,25,"length"],[605,31,637,31],[605,34,637,34],[605,35,637,35],[605,36,637,36],[606,2,638,0],[607,0,638,1],[607,3]],"functionMap":{"names":["<global>","getRoutes","getDirectoryTree","ignoreList.some$argument_0","contextKeys.map$argument_0","validRedirectDestinations.find$argument_0","node.loadRoute","flattenDirectoryTreeToRoutes","getFileMeta","getIgnoreList","extrapolateGroups","generateDynamic","path.split.map$argument_0","path.split.map.filter$argument_0","appendSitemapRoute","appendNotFoundRoute","getLayoutNode","node.children.find$argument_0","crawlAndAppendInitialRoutesAndEntryFiles","node.children.filter$argument_0","node.children.filter.map$argument_0","getMostSpecific"],"mappings":"AAA;ACqB;CDW;AEI;oCC+B,uCD;8DEI;iBFK;qDGG,qCH;oCC8B,uCD;8DEI;iBFK;mEGC,qCH;4BCqB,+BD;YIW;aJ+B;CFgK;AOI;CP2C;AQC;CRwD;ASC;CTM;AUM;CVmB;AWC;aCG;KDa;gBEC,gBF;CXE;AcC;CdS;AeC;CfS;AgBC;kDCO;KDE;ChB6B;AkBC;sDDoB;SCE;mDD2B,iCC;4BCG,2BD;yBEC,6BF;ClBiB;AqBC;CrBQ"}},"type":"js/module"}]}