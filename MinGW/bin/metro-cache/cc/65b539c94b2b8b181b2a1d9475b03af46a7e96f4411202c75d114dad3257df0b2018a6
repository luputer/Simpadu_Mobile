{"dependencies":[{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"]}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":168},"end":{"line":5,"column":52,"index":203}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"]}},{"name":"@react-navigation/native-stack","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":23,"index":228},"end":{"line":6,"column":64,"index":269}}],"key":"Tw1dyZPdNt5nhNu5CoB7YZxWQjI=","exportNames":["*"]}},{"name":"./withLayoutContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":28,"index":299},"end":{"line":7,"column":58,"index":329}}],"key":"uI8DQ+0pBl5vWiQx60egJpSWI0Q=","exportNames":["*"]}},{"name":"../useScreens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":21,"index":352},"end":{"line":8,"column":45,"index":376}}],"key":"8gimF/GgYNRJ+ojtiVDaShLJVrk=","exportNames":["*"]}},{"name":"../views/Protected","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":20,"index":398},"end":{"line":9,"column":49,"index":427}}],"key":"k1+uDYZ/MvJqE4WVPvI1cbQswMs=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  var _reactJsxDevRuntime = require(_dependencyMap[0], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"C:\\\\Users\\\\Saidi\\\\OneDrive\\\\Documents\\\\Semeter4\\\\Pemerograman_Web\\\\Microservice\\\\mobile-fix\\\\node_modules\\\\expo-router\\\\build\\\\layouts\\\\StackClient.js\";\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StackRouter = exports.stackRouterOverride = void 0;\n  const native_1 = require(_dependencyMap[1], \"@react-navigation/native\");\n  const native_stack_1 = require(_dependencyMap[2], \"@react-navigation/native-stack\");\n  const withLayoutContext_1 = require(_dependencyMap[3], \"./withLayoutContext\");\n  const useScreens_1 = require(_dependencyMap[4], \"../useScreens\");\n  const Protected_1 = require(_dependencyMap[5], \"../views/Protected\");\n  const NativeStackNavigator = (0, native_stack_1.createNativeStackNavigator)().Navigator;\n  const RNStack = (0, withLayoutContext_1.withLayoutContext)(NativeStackNavigator);\n  function isStackAction(action) {\n    return action.type === 'PUSH' || action.type === 'NAVIGATE' || action.type === 'POP' || action.type === 'POP_TO_TOP' || action.type === 'REPLACE';\n  }\n  /**\n   * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n   * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n   *\n   * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n   *\n   * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n   *\n   */\n  const stackRouterOverride = original => {\n    return {\n      getStateForAction: (state, action, options) => {\n        if (action.target && action.target !== state.key) {\n          return null;\n        }\n        if (!isStackAction(action)) {\n          return original.getStateForAction(state, action, options);\n        }\n        // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n        const actionSingularOptions = action.payload && 'singular' in action.payload ? action.payload.singular : undefined;\n        // Handle if 'getID' or 'singular' is set.\n        function getIdFunction(fn) {\n          // Actions can be fired by the user, so we do need to validate their structure.\n          if (!('payload' in action) || !action.payload || !('name' in action.payload) || typeof action.payload.name !== 'string') {\n            return;\n          }\n          const name = action.payload.name;\n          return (\n            // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n            getActionSingularIdFn(actionSingularOptions, name) ||\n            // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n            options.routeGetIdList[name] ||\n            // The custom singular added by Expo Router to support its concept of `navigate`\n            fn\n          );\n        }\n        switch (action.type) {\n          case 'PUSH':\n            {\n              /**\n               * PUSH should always push\n               *\n               * If 'getID' or 'singular' is set and a match is found, instead of pushing a new screen,\n               * the existing screen will be moved to the HEAD of the stack. If there are multiple matches, the rest will be removed.\n               */\n              const nextState = original.getStateForAction(state, action, Object.assign({}, options, {\n                routeGetIdList: Object.assign({}, options.routeGetIdList, {\n                  [action.payload.name]: getIdFunction()\n                })\n              }));\n              /**\n               * React Navigation doesn't support dynamic getId function on the action. Because of this,\n               * can you enter a state where the screen is pushed multiple times but the normal getStateForAction\n               * doesn't remove the duplicates. We need to filter the state to only have singular screens.\n               */\n              return actionSingularOptions ? filterSingular(nextState, actionSingularOptions) : nextState;\n            }\n          case 'NAVIGATE':\n            {\n              /**\n               * NAVIGATE should push unless the current name & route params of the current and target screen match.\n               * Search params and hashes should be ignored.\n               *\n               * If the name, route params & search params match, no action is taken.\n               * If both the name and route params match, the screen is replaced.\n               * If the name / route params do not match, the screen is pushed.\n               *\n               * If 'getID' or 'singular' is set and a match is found, instead of pushing a new screen,\n               * the existing screen will be moved to the HEAD of the stack. If there are multiple matches, the rest will be removed.\n               */\n              const nextState = original.getStateForAction(state, action, Object.assign({}, options, {\n                routeGetIdList: Object.assign({}, options.routeGetIdList, {\n                  [action.payload.name]: getIdFunction(options => {\n                    return (0, useScreens_1.getSingularId)(action.payload.name, options);\n                  })\n                })\n              }));\n              /**\n               * React Navigation doesn't support dynamic getId function on the action. Because of this,\n               * can you enter a state where the screen is pushed multiple times but the normal getStateForAction\n               * doesn't remove the duplicates. We need to filter the state to only have singular screens.\n               */\n              return actionSingularOptions ? filterSingular(nextState, actionSingularOptions) : nextState;\n            }\n          default:\n            {\n              return original.getStateForAction(state, action, options);\n            }\n        }\n      }\n    };\n  };\n  exports.stackRouterOverride = stackRouterOverride;\n  function getActionSingularIdFn(actionGetId, name) {\n    if (typeof actionGetId === 'function') {\n      return options => actionGetId(name, options.params ?? {});\n    } else if (actionGetId === true) {\n      return options => (0, useScreens_1.getSingularId)(name, options);\n    }\n    return undefined;\n  }\n  /**\n   * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n   * As multiples may have been added before we did the singular navigation.\n   */\n  function filterSingular(state, singular) {\n    if (!state || !singular) {\n      return state;\n    }\n    if (!state.routes) {\n      return state;\n    }\n    const currentIndex = state.index || state.routes.length - 1;\n    const current = state.routes[currentIndex];\n    const name = current.name;\n    const getId = getActionSingularIdFn(singular, name);\n    if (!getId) {\n      return state;\n    }\n    const id = getId({\n      params: current.params\n    });\n    if (!id) {\n      return state;\n    }\n    // TypeScript needs a type assertion here for the filter to work.\n    let routes = state.routes;\n    routes = routes.filter((route, index) => {\n      // If the route is the current route, keep it.\n      if (index === currentIndex) {\n        return true;\n      }\n      // Remove all other routes with the same name and id.\n      return name !== route.name || id !== getId({\n        params: route.params\n      });\n    });\n    return Object.assign({}, state, {\n      index: routes.length - 1,\n      routes\n    });\n  }\n  const Stack = Object.assign(props => {\n    return /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(RNStack, Object.assign({}, props, {\n      UNSTABLE_router: exports.stackRouterOverride\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 12\n    }, this);\n  }, {\n    Screen: RNStack.Screen,\n    Protected: Protected_1.Protected\n  });\n  exports.default = Stack;\n  const StackRouter = options => {\n    const router = (0, native_1.StackRouter)(options);\n    return Object.assign({}, router, (0, exports.stackRouterOverride)(router));\n  };\n  exports.StackRouter = StackRouter;\n});","lineCount":181,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,2,13],[5,6,2,13,"_reactJsxDevRuntime"],[5,25,2,13],[5,28,2,13,"require"],[5,35,2,13],[5,36,2,13,"_dependencyMap"],[5,50,2,13],[6,2,2,13],[6,6,2,13,"_jsxFileName"],[6,18,2,13],[7,2,3,0,"Object"],[7,8,3,6],[7,9,3,7,"defineProperty"],[7,23,3,21],[7,24,3,22,"exports"],[7,31,3,29],[7,33,3,31],[7,45,3,43],[7,47,3,45],[8,4,3,47,"value"],[8,9,3,52],[8,11,3,54],[9,2,3,59],[9,3,3,60],[9,4,3,61],[10,2,4,0,"exports"],[10,9,4,7],[10,10,4,8,"StackRouter"],[10,21,4,19],[10,24,4,22,"exports"],[10,31,4,29],[10,32,4,30,"stackRouterOverride"],[10,51,4,49],[10,54,4,52],[10,59,4,57],[10,60,4,58],[11,2,5,0],[11,8,5,6,"native_1"],[11,16,5,14],[11,19,5,17,"require"],[11,26,5,24],[11,27,5,24,"_dependencyMap"],[11,41,5,24],[11,72,5,51],[11,73,5,52],[12,2,6,0],[12,8,6,6,"native_stack_1"],[12,22,6,20],[12,25,6,23,"require"],[12,32,6,30],[12,33,6,30,"_dependencyMap"],[12,47,6,30],[12,84,6,63],[12,85,6,64],[13,2,7,0],[13,8,7,6,"withLayoutContext_1"],[13,27,7,25],[13,30,7,28,"require"],[13,37,7,35],[13,38,7,35,"_dependencyMap"],[13,52,7,35],[13,78,7,57],[13,79,7,58],[14,2,8,0],[14,8,8,6,"useScreens_1"],[14,20,8,18],[14,23,8,21,"require"],[14,30,8,28],[14,31,8,28,"_dependencyMap"],[14,45,8,28],[14,65,8,44],[14,66,8,45],[15,2,9,0],[15,8,9,6,"Protected_1"],[15,19,9,17],[15,22,9,20,"require"],[15,29,9,27],[15,30,9,27,"_dependencyMap"],[15,44,9,27],[15,69,9,48],[15,70,9,49],[16,2,10,0],[16,8,10,6,"NativeStackNavigator"],[16,28,10,26],[16,31,10,29],[16,32,10,30],[16,33,10,31],[16,35,10,33,"native_stack_1"],[16,49,10,47],[16,50,10,48,"createNativeStackNavigator"],[16,76,10,74],[16,78,10,76],[16,79,10,77],[16,80,10,78,"Navigator"],[16,89,10,87],[17,2,11,0],[17,8,11,6,"RNStack"],[17,15,11,13],[17,18,11,16],[17,19,11,17],[17,20,11,18],[17,22,11,20,"withLayoutContext_1"],[17,41,11,39],[17,42,11,40,"withLayoutContext"],[17,59,11,57],[17,61,11,59,"NativeStackNavigator"],[17,81,11,79],[17,82,11,80],[18,2,12,0],[18,11,12,9,"isStackAction"],[18,24,12,22,"isStackAction"],[18,25,12,23,"action"],[18,31,12,29],[18,33,12,31],[19,4,13,4],[19,11,13,12,"action"],[19,17,13,18],[19,18,13,19,"type"],[19,22,13,23],[19,27,13,28],[19,33,13,34],[19,37,14,8,"action"],[19,43,14,14],[19,44,14,15,"type"],[19,48,14,19],[19,53,14,24],[19,63,14,34],[19,67,15,8,"action"],[19,73,15,14],[19,74,15,15,"type"],[19,78,15,19],[19,83,15,24],[19,88,15,29],[19,92,16,8,"action"],[19,98,16,14],[19,99,16,15,"type"],[19,103,16,19],[19,108,16,24],[19,120,16,36],[19,124,17,8,"action"],[19,130,17,14],[19,131,17,15,"type"],[19,135,17,19],[19,140,17,24],[19,149,17,33],[20,2,18,0],[21,2,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,2,28,0],[30,8,28,6,"stackRouterOverride"],[30,27,28,25],[30,30,28,29,"original"],[30,38,28,37],[30,42,28,42],[31,4,29,4],[31,11,29,11],[32,6,30,8,"getStateForAction"],[32,23,30,25],[32,25,30,27,"getStateForAction"],[32,26,30,28,"state"],[32,31,30,33],[32,33,30,35,"action"],[32,39,30,41],[32,41,30,43,"options"],[32,48,30,50],[32,53,30,55],[33,8,31,12],[33,12,31,16,"action"],[33,18,31,22],[33,19,31,23,"target"],[33,25,31,29],[33,29,31,33,"action"],[33,35,31,39],[33,36,31,40,"target"],[33,42,31,46],[33,47,31,51,"state"],[33,52,31,56],[33,53,31,57,"key"],[33,56,31,60],[33,58,31,62],[34,10,32,16],[34,17,32,23],[34,21,32,27],[35,8,33,12],[36,8,34,12],[36,12,34,16],[36,13,34,17,"isStackAction"],[36,26,34,30],[36,27,34,31,"action"],[36,33,34,37],[36,34,34,38],[36,36,34,40],[37,10,35,16],[37,17,35,23,"original"],[37,25,35,31],[37,26,35,32,"getStateForAction"],[37,43,35,49],[37,44,35,50,"state"],[37,49,35,55],[37,51,35,57,"action"],[37,57,35,63],[37,59,35,65,"options"],[37,66,35,72],[37,67,35,73],[38,8,36,12],[39,8,37,12],[40,8,38,12],[40,14,38,18,"actionSingularOptions"],[40,35,38,39],[40,38,38,42,"action"],[40,44,38,48],[40,45,38,49,"payload"],[40,52,38,56],[40,56,38,60],[40,66,38,70],[40,70,38,74,"action"],[40,76,38,80],[40,77,38,81,"payload"],[40,84,38,88],[40,87,39,18,"action"],[40,93,39,24],[40,94,39,25,"payload"],[40,101,39,32],[40,102,39,33,"singular"],[40,110,39,41],[40,113,40,18,"undefined"],[40,122,40,27],[41,8,41,12],[42,8,42,12],[42,17,42,21,"getIdFunction"],[42,30,42,34,"getIdFunction"],[42,31,42,35,"fn"],[42,33,42,37],[42,35,42,39],[43,10,43,16],[44,10,44,16],[44,14,44,20],[44,16,44,22],[44,25,44,31],[44,29,44,35,"action"],[44,35,44,41],[44,36,44,42],[44,40,45,20],[44,41,45,21,"action"],[44,47,45,27],[44,48,45,28,"payload"],[44,55,45,35],[44,59,46,20],[44,61,46,22],[44,67,46,28],[44,71,46,32,"action"],[44,77,46,38],[44,78,46,39,"payload"],[44,85,46,46],[44,86,46,47],[44,90,47,20],[44,97,47,27,"action"],[44,103,47,33],[44,104,47,34,"payload"],[44,111,47,41],[44,112,47,42,"name"],[44,116,47,46],[44,121,47,51],[44,129,47,59],[44,131,47,61],[45,12,48,20],[46,10,49,16],[47,10,50,16],[47,16,50,22,"name"],[47,20,50,26],[47,23,50,29,"action"],[47,29,50,35],[47,30,50,36,"payload"],[47,37,50,43],[47,38,50,44,"name"],[47,42,50,48],[48,10,51,16],[49,12,52,16],[50,12,53,16,"getActionSingularIdFn"],[50,33,53,37],[50,34,53,38,"actionSingularOptions"],[50,55,53,59],[50,57,53,61,"name"],[50,61,53,65],[50,62,53,66],[51,12,54,20],[52,12,55,20,"options"],[52,19,55,27],[52,20,55,28,"routeGetIdList"],[52,34,55,42],[52,35,55,43,"name"],[52,39,55,47],[52,40,55,48],[53,12,56,20],[54,12,57,20,"fn"],[55,10,57,22],[56,8,58,12],[57,8,59,12],[57,16,59,20,"action"],[57,22,59,26],[57,23,59,27,"type"],[57,27,59,31],[58,10,60,16],[58,15,60,21],[58,21,60,27],[59,12,60,29],[60,14,61,20],[61,0,62,0],[62,0,63,0],[63,0,64,0],[64,0,65,0],[65,0,66,0],[66,14,67,20],[66,20,67,26,"nextState"],[66,29,67,35],[66,32,67,38,"original"],[66,40,67,46],[66,41,67,47,"getStateForAction"],[66,58,67,64],[66,59,67,65,"state"],[66,64,67,70],[66,66,67,72,"action"],[66,72,67,78],[66,74,67,78,"Object"],[66,80,67,78],[66,81,67,78,"assign"],[66,87,67,78],[66,92,68,27,"options"],[66,99,68,34],[67,16,69,24,"routeGetIdList"],[67,30,69,38],[67,32,69,38,"Object"],[67,38,69,38],[67,39,69,38,"assign"],[67,45,69,38],[67,50,70,31,"options"],[67,57,70,38],[67,58,70,39,"routeGetIdList"],[67,72,70,53],[68,18,71,28],[68,19,71,29,"action"],[68,25,71,35],[68,26,71,36,"payload"],[68,33,71,43],[68,34,71,44,"name"],[68,38,71,48],[68,41,71,51,"getIdFunction"],[68,54,71,64],[68,55,71,65],[69,16,71,66],[70,14,72,25],[70,16,73,21],[70,17,73,22],[71,14,74,20],[72,0,75,0],[73,0,76,0],[74,0,77,0],[75,0,78,0],[76,14,79,20],[76,21,79,27,"actionSingularOptions"],[76,42,79,48],[76,45,80,26,"filterSingular"],[76,59,80,40],[76,60,80,41,"nextState"],[76,69,80,50],[76,71,80,52,"actionSingularOptions"],[76,92,80,73],[76,93,80,74],[76,96,81,26,"nextState"],[76,105,81,35],[77,12,82,16],[78,10,83,16],[78,15,83,21],[78,25,83,31],[79,12,83,33],[80,14,84,20],[81,0,85,0],[82,0,86,0],[83,0,87,0],[84,0,88,0],[85,0,89,0],[86,0,90,0],[87,0,91,0],[88,0,92,0],[89,0,93,0],[90,0,94,0],[91,14,95,20],[91,20,95,26,"nextState"],[91,29,95,35],[91,32,95,38,"original"],[91,40,95,46],[91,41,95,47,"getStateForAction"],[91,58,95,64],[91,59,95,65,"state"],[91,64,95,70],[91,66,95,72,"action"],[91,72,95,78],[91,74,95,78,"Object"],[91,80,95,78],[91,81,95,78,"assign"],[91,87,95,78],[91,92,96,27,"options"],[91,99,96,34],[92,16,97,24,"routeGetIdList"],[92,30,97,38],[92,32,97,38,"Object"],[92,38,97,38],[92,39,97,38,"assign"],[92,45,97,38],[92,50,98,31,"options"],[92,57,98,38],[92,58,98,39,"routeGetIdList"],[92,72,98,53],[93,18,99,28],[93,19,99,29,"action"],[93,25,99,35],[93,26,99,36,"payload"],[93,33,99,43],[93,34,99,44,"name"],[93,38,99,48],[93,41,99,51,"getIdFunction"],[93,54,99,64],[93,55,99,66,"options"],[93,62,99,73],[93,66,99,78],[94,20,100,32],[94,27,100,39],[94,28,100,40],[94,29,100,41],[94,31,100,43,"useScreens_1"],[94,43,100,55],[94,44,100,56,"getSingularId"],[94,57,100,69],[94,59,100,71,"action"],[94,65,100,77],[94,66,100,78,"payload"],[94,73,100,85],[94,74,100,86,"name"],[94,78,100,90],[94,80,100,92,"options"],[94,87,100,99],[94,88,100,100],[95,18,101,28],[95,19,101,29],[96,16,101,30],[97,14,102,25],[97,16,103,21],[97,17,103,22],[98,14,104,20],[99,0,105,0],[100,0,106,0],[101,0,107,0],[102,0,108,0],[103,14,109,20],[103,21,109,27,"actionSingularOptions"],[103,42,109,48],[103,45,110,26,"filterSingular"],[103,59,110,40],[103,60,110,41,"nextState"],[103,69,110,50],[103,71,110,52,"actionSingularOptions"],[103,92,110,73],[103,93,110,74],[103,96,111,26,"nextState"],[103,105,111,35],[104,12,112,16],[105,10,113,16],[106,12,113,25],[107,14,114,20],[107,21,114,27,"original"],[107,29,114,35],[107,30,114,36,"getStateForAction"],[107,47,114,53],[107,48,114,54,"state"],[107,53,114,59],[107,55,114,61,"action"],[107,61,114,67],[107,63,114,69,"options"],[107,70,114,76],[107,71,114,77],[108,12,115,16],[109,8,116,12],[110,6,117,8],[111,4,118,4],[111,5,118,5],[112,2,119,0],[112,3,119,1],[113,2,120,0,"exports"],[113,9,120,7],[113,10,120,8,"stackRouterOverride"],[113,29,120,27],[113,32,120,30,"stackRouterOverride"],[113,51,120,49],[114,2,121,0],[114,11,121,9,"getActionSingularIdFn"],[114,32,121,30,"getActionSingularIdFn"],[114,33,121,31,"actionGetId"],[114,44,121,42],[114,46,121,44,"name"],[114,50,121,48],[114,52,121,50],[115,4,122,4],[115,8,122,8],[115,15,122,15,"actionGetId"],[115,26,122,26],[115,31,122,31],[115,41,122,41],[115,43,122,43],[116,6,123,8],[116,13,123,16,"options"],[116,20,123,23],[116,24,123,28,"actionGetId"],[116,35,123,39],[116,36,123,40,"name"],[116,40,123,44],[116,42,123,46,"options"],[116,49,123,53],[116,50,123,54,"params"],[116,56,123,60],[116,60,123,64],[116,61,123,65],[116,62,123,66],[116,63,123,67],[117,4,124,4],[117,5,124,5],[117,11,125,9],[117,15,125,13,"actionGetId"],[117,26,125,24],[117,31,125,29],[117,35,125,33],[117,37,125,35],[118,6,126,8],[118,13,126,16,"options"],[118,20,126,23],[118,24,126,28],[118,25,126,29],[118,26,126,30],[118,28,126,32,"useScreens_1"],[118,40,126,44],[118,41,126,45,"getSingularId"],[118,54,126,58],[118,56,126,60,"name"],[118,60,126,64],[118,62,126,66,"options"],[118,69,126,73],[118,70,126,74],[119,4,127,4],[120,4,128,4],[120,11,128,11,"undefined"],[120,20,128,20],[121,2,129,0],[122,2,130,0],[123,0,131,0],[124,0,132,0],[125,0,133,0],[126,2,134,0],[126,11,134,9,"filterSingular"],[126,25,134,23,"filterSingular"],[126,26,134,24,"state"],[126,31,134,29],[126,33,134,31,"singular"],[126,41,134,39],[126,43,134,41],[127,4,135,4],[127,8,135,8],[127,9,135,9,"state"],[127,14,135,14],[127,18,135,18],[127,19,135,19,"singular"],[127,27,135,27],[127,29,135,29],[128,6,136,8],[128,13,136,15,"state"],[128,18,136,20],[129,4,137,4],[130,4,138,4],[130,8,138,8],[130,9,138,9,"state"],[130,14,138,14],[130,15,138,15,"routes"],[130,21,138,21],[130,23,138,23],[131,6,139,8],[131,13,139,15,"state"],[131,18,139,20],[132,4,140,4],[133,4,141,4],[133,10,141,10,"currentIndex"],[133,22,141,22],[133,25,141,25,"state"],[133,30,141,30],[133,31,141,31,"index"],[133,36,141,36],[133,40,141,40,"state"],[133,45,141,45],[133,46,141,46,"routes"],[133,52,141,52],[133,53,141,53,"length"],[133,59,141,59],[133,62,141,62],[133,63,141,63],[134,4,142,4],[134,10,142,10,"current"],[134,17,142,17],[134,20,142,20,"state"],[134,25,142,25],[134,26,142,26,"routes"],[134,32,142,32],[134,33,142,33,"currentIndex"],[134,45,142,45],[134,46,142,46],[135,4,143,4],[135,10,143,10,"name"],[135,14,143,14],[135,17,143,17,"current"],[135,24,143,24],[135,25,143,25,"name"],[135,29,143,29],[136,4,144,4],[136,10,144,10,"getId"],[136,15,144,15],[136,18,144,18,"getActionSingularIdFn"],[136,39,144,39],[136,40,144,40,"singular"],[136,48,144,48],[136,50,144,50,"name"],[136,54,144,54],[136,55,144,55],[137,4,145,4],[137,8,145,8],[137,9,145,9,"getId"],[137,14,145,14],[137,16,145,16],[138,6,146,8],[138,13,146,15,"state"],[138,18,146,20],[139,4,147,4],[140,4,148,4],[140,10,148,10,"id"],[140,12,148,12],[140,15,148,15,"getId"],[140,20,148,20],[140,21,148,21],[141,6,148,23,"params"],[141,12,148,29],[141,14,148,31,"current"],[141,21,148,38],[141,22,148,39,"params"],[142,4,148,46],[142,5,148,47],[142,6,148,48],[143,4,149,4],[143,8,149,8],[143,9,149,9,"id"],[143,11,149,11],[143,13,149,13],[144,6,150,8],[144,13,150,15,"state"],[144,18,150,20],[145,4,151,4],[146,4,152,4],[147,4,153,4],[147,8,153,8,"routes"],[147,14,153,14],[147,17,153,17,"state"],[147,22,153,22],[147,23,153,23,"routes"],[147,29,153,29],[148,4,154,4,"routes"],[148,10,154,10],[148,13,154,13,"routes"],[148,19,154,19],[148,20,154,20,"filter"],[148,26,154,26],[148,27,154,27],[148,28,154,28,"route"],[148,33,154,33],[148,35,154,35,"index"],[148,40,154,40],[148,45,154,45],[149,6,155,8],[150,6,156,8],[150,10,156,12,"index"],[150,15,156,17],[150,20,156,22,"currentIndex"],[150,32,156,34],[150,34,156,36],[151,8,157,12],[151,15,157,19],[151,19,157,23],[152,6,158,8],[153,6,159,8],[154,6,160,8],[154,13,160,15,"name"],[154,17,160,19],[154,22,160,24,"route"],[154,27,160,29],[154,28,160,30,"name"],[154,32,160,34],[154,36,160,38,"id"],[154,38,160,40],[154,43,160,45,"getId"],[154,48,160,50],[154,49,160,51],[155,8,160,53,"params"],[155,14,160,59],[155,16,160,61,"route"],[155,21,160,66],[155,22,160,67,"params"],[156,6,160,74],[156,7,160,75],[156,8,160,76],[157,4,161,4],[157,5,161,5],[157,6,161,6],[158,4,162,4],[158,11,162,4,"Object"],[158,17,162,4],[158,18,162,4,"assign"],[158,24,162,4],[158,29,163,11,"state"],[158,34,163,16],[159,6,164,8,"index"],[159,11,164,13],[159,13,164,15,"routes"],[159,19,164,21],[159,20,164,22,"length"],[159,26,164,28],[159,29,164,31],[159,30,164,32],[160,6,165,8,"routes"],[161,4,165,14],[162,2,167,0],[163,2,168,0],[163,8,168,6,"Stack"],[163,13,168,11],[163,16,168,14,"Object"],[163,22,168,20],[163,23,168,21,"assign"],[163,29,168,27],[163,30,168,29,"props"],[163,35,168,34],[163,39,168,39],[164,4,169,4],[164,24,169,11,"_reactJsxDevRuntime"],[164,43,169,11],[164,44,169,11,"jsxDEV"],[164,50,169,11],[164,51,169,12,"RNStack"],[164,58,169,19],[164,60,169,19,"Object"],[164,66,169,19],[164,67,169,19,"assign"],[164,73,169,19],[164,78,169,24,"props"],[164,83,169,29],[165,6,169,31,"UNSTABLE_router"],[165,21,169,46],[165,23,169,48,"exports"],[165,30,169,55],[165,31,169,56,"stackRouterOverride"],[166,4,169,76],[167,6,169,76,"fileName"],[167,14,169,76],[167,16,169,76,"_jsxFileName"],[167,28,169,76],[168,6,169,76,"lineNumber"],[168,16,169,76],[169,6,169,76,"columnNumber"],[169,18,169,76],[170,4,169,76],[170,11,169,77],[170,12,169,78],[171,2,170,0],[171,3,170,1],[171,5,170,3],[172,4,171,4,"Screen"],[172,10,171,10],[172,12,171,12,"RNStack"],[172,19,171,19],[172,20,171,20,"Screen"],[172,26,171,26],[173,4,172,4,"Protected"],[173,13,172,13],[173,15,172,15,"Protected_1"],[173,26,172,26],[173,27,172,27,"Protected"],[174,2,173,0],[174,3,173,1],[174,4,173,2],[175,2,174,0,"exports"],[175,9,174,7],[175,10,174,8,"default"],[175,17,174,15],[175,20,174,18,"Stack"],[175,25,174,23],[176,2,175,0],[176,8,175,6,"StackRouter"],[176,19,175,17],[176,22,175,21,"options"],[176,29,175,28],[176,33,175,33],[177,4,176,4],[177,10,176,10,"router"],[177,16,176,16],[177,19,176,19],[177,20,176,20],[177,21,176,21],[177,23,176,23,"native_1"],[177,31,176,31],[177,32,176,32,"StackRouter"],[177,43,176,43],[177,45,176,45,"options"],[177,52,176,52],[177,53,176,53],[178,4,177,4],[178,11,177,4,"Object"],[178,17,177,4],[178,18,177,4,"assign"],[178,24,177,4],[178,29,178,11,"router"],[178,35,178,17],[178,37,179,11],[178,38,179,12],[178,39,179,13],[178,41,179,15,"exports"],[178,48,179,22],[178,49,179,23,"stackRouterOverride"],[178,68,179,42],[178,70,179,44,"router"],[178,76,179,50],[178,77,179,51],[179,2,181,0],[179,3,181,1],[180,2,182,0,"exports"],[180,9,182,7],[180,10,182,8,"StackRouter"],[180,21,182,19],[180,24,182,22,"StackRouter"],[180,35,182,33],[181,0,182,34],[181,3]],"functionMap":{"names":["<global>","isStackAction","stackRouterOverride","getStateForAction","getIdFunction","getIdFunction$argument_0","getActionSingularIdFn","<anonymous>","filterSingular","routes.filter$argument_0","Object.assign$argument_0","StackRouter"],"mappings":"AAA;ACW;CDM;4BEU;2BCE;YCY;aDgB;iEEyC;6BFE;SDgB;CFE;AME;eCE,oDD;eCG,2DD;CNG;AQK;2BCoB;KDO;CRM;4BUC;CVE;oBWK;CXM"}},"type":"js/module"}]}