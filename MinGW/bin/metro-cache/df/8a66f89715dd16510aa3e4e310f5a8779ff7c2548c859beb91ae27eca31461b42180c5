{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":19,"index":281},"end":{"line":6,"column":40,"index":302}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parseRouteSegments = parseRouteSegments;\n  exports.getReactNavigationScreensConfig = getReactNavigationScreensConfig;\n  exports.getReactNavigationConfig = getReactNavigationConfig;\n  var matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  // `[page]` -> `:page`\n  // `page` -> `page`\n  function convertDynamicRouteToReactNavigation(segment) {\n    // NOTE(EvanBacon): To support shared routes we preserve group segments.\n    if (segment === 'index') {\n      return '';\n    }\n    if (segment === '+not-found') {\n      return '*not-found';\n    }\n    var rest = (0, matchers_1.matchDeepDynamicRouteName)(segment);\n    if (rest != null) {\n      return '*' + rest;\n    }\n    var dynamicName = (0, matchers_1.matchDynamicName)(segment);\n    if (dynamicName != null) {\n      return `:${dynamicName}`;\n    }\n    return segment;\n  }\n  function parseRouteSegments(segments) {\n    return (\n      // NOTE(EvanBacon): When there are nested routes without layouts\n      // the node.route will be something like `app/home/index`\n      // this needs to be split to ensure each segment is parsed correctly.\n      segments.split('/')\n      // Convert each segment to a React Navigation format.\n      .map(convertDynamicRouteToReactNavigation)\n      // Remove any empty paths from groups or index routes.\n      .filter(Boolean)\n      // Join to return as a path.\n      .join('/')\n    );\n  }\n  function convertRouteNodeToScreen(node, metaOnly) {\n    var path = parseRouteSegments(node.route);\n    if (!node.children.length) {\n      if (!metaOnly) {\n        return {\n          path,\n          screens: {},\n          _route: node\n        };\n      }\n      return path;\n    }\n    var screens = getReactNavigationScreensConfig(node.children, metaOnly);\n    var screen = {\n      path,\n      screens\n    };\n    if (node.initialRouteName) {\n      // NOTE(EvanBacon): This is bad because it forces all Layout Routes\n      // to be loaded into memory. We should move towards a system where\n      // the initial route name is either loaded asynchronously in the Layout Route\n      // or defined via a file system convention.\n      screen.initialRouteName = node.initialRouteName;\n    }\n    if (!metaOnly) {\n      screen._route = node;\n    }\n    return screen;\n  }\n  function getReactNavigationScreensConfig(nodes, metaOnly) {\n    return Object.fromEntries(nodes.map(node => [node.route, convertRouteNodeToScreen(node, metaOnly)]));\n  }\n  function getReactNavigationConfig(routes, metaOnly) {\n    var config = {\n      initialRouteName: undefined,\n      screens: getReactNavigationScreensConfig(routes.children, metaOnly)\n    };\n    if (routes.initialRouteName) {\n      // We're using LinkingOptions the generic type is `object` instead of a proper ParamList.\n      // So we need to cast the initialRouteName to `any` to avoid type errors.\n      config.initialRouteName = routes.initialRouteName;\n    }\n    return config;\n  }\n});","lineCount":89,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"parseRouteSegments"],[7,28,3,26],[7,31,3,29,"parseRouteSegments"],[7,49,3,47],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getReactNavigationScreensConfig"],[8,41,4,39],[8,44,4,42,"getReactNavigationScreensConfig"],[8,75,4,73],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"getReactNavigationConfig"],[9,34,5,32],[9,37,5,35,"getReactNavigationConfig"],[9,61,5,59],[10,2,6,0],[10,6,6,6,"matchers_1"],[10,16,6,16],[10,19,6,19,"require"],[10,26,6,26],[10,27,6,26,"_dependencyMap"],[10,41,6,26],[10,58,6,39],[10,59,6,40],[11,2,7,0],[12,2,8,0],[13,2,9,0],[13,11,9,9,"convertDynamicRouteToReactNavigation"],[13,47,9,45,"convertDynamicRouteToReactNavigation"],[13,48,9,46,"segment"],[13,55,9,53],[13,57,9,55],[14,4,10,4],[15,4,11,4],[15,8,11,8,"segment"],[15,15,11,15],[15,20,11,20],[15,27,11,27],[15,29,11,29],[16,6,12,8],[16,13,12,15],[16,15,12,17],[17,4,13,4],[18,4,14,4],[18,8,14,8,"segment"],[18,15,14,15],[18,20,14,20],[18,32,14,32],[18,34,14,34],[19,6,15,8],[19,13,15,15],[19,25,15,27],[20,4,16,4],[21,4,17,4],[21,8,17,10,"rest"],[21,12,17,14],[21,15,17,17],[21,16,17,18],[21,17,17,19],[21,19,17,21,"matchers_1"],[21,29,17,31],[21,30,17,32,"matchDeepDynamicRouteName"],[21,55,17,57],[21,57,17,59,"segment"],[21,64,17,66],[21,65,17,67],[22,4,18,4],[22,8,18,8,"rest"],[22,12,18,12],[22,16,18,16],[22,20,18,20],[22,22,18,22],[23,6,19,8],[23,13,19,15],[23,16,19,18],[23,19,19,21,"rest"],[23,23,19,25],[24,4,20,4],[25,4,21,4],[25,8,21,10,"dynamicName"],[25,19,21,21],[25,22,21,24],[25,23,21,25],[25,24,21,26],[25,26,21,28,"matchers_1"],[25,36,21,38],[25,37,21,39,"matchDynamicName"],[25,53,21,55],[25,55,21,57,"segment"],[25,62,21,64],[25,63,21,65],[26,4,22,4],[26,8,22,8,"dynamicName"],[26,19,22,19],[26,23,22,23],[26,27,22,27],[26,29,22,29],[27,6,23,8],[27,13,23,15],[27,17,23,19,"dynamicName"],[27,28,23,30],[27,30,23,32],[28,4,24,4],[29,4,25,4],[29,11,25,11,"segment"],[29,18,25,18],[30,2,26,0],[31,2,27,0],[31,11,27,9,"parseRouteSegments"],[31,29,27,27,"parseRouteSegments"],[31,30,27,28,"segments"],[31,38,27,36],[31,40,27,38],[32,4,28,4],[33,6,29,4],[34,6,30,4],[35,6,31,4],[36,6,32,4,"segments"],[36,14,32,12],[36,15,33,9,"split"],[36,20,33,14],[36,21,33,15],[36,24,33,18],[37,6,34,8],[38,6,34,8],[38,7,35,9,"map"],[38,10,35,12],[38,11,35,13,"convertDynamicRouteToReactNavigation"],[38,47,35,49],[39,6,36,8],[40,6,36,8],[40,7,37,9,"filter"],[40,13,37,15],[40,14,37,16,"Boolean"],[40,21,37,23],[41,6,38,8],[42,6,38,8],[42,7,39,9,"join"],[42,11,39,13],[42,12,39,14],[42,15,39,17],[43,4,39,18],[44,2,40,0],[45,2,41,0],[45,11,41,9,"convertRouteNodeToScreen"],[45,35,41,33,"convertRouteNodeToScreen"],[45,36,41,34,"node"],[45,40,41,38],[45,42,41,40,"metaOnly"],[45,50,41,48],[45,52,41,50],[46,4,42,4],[46,8,42,10,"path"],[46,12,42,14],[46,15,42,17,"parseRouteSegments"],[46,33,42,35],[46,34,42,36,"node"],[46,38,42,40],[46,39,42,41,"route"],[46,44,42,46],[46,45,42,47],[47,4,43,4],[47,8,43,8],[47,9,43,9,"node"],[47,13,43,13],[47,14,43,14,"children"],[47,22,43,22],[47,23,43,23,"length"],[47,29,43,29],[47,31,43,31],[48,6,44,8],[48,10,44,12],[48,11,44,13,"metaOnly"],[48,19,44,21],[48,21,44,23],[49,8,45,12],[49,15,45,19],[50,10,46,16,"path"],[50,14,46,20],[51,10,47,16,"screens"],[51,17,47,23],[51,19,47,25],[51,20,47,26],[51,21,47,27],[52,10,48,16,"_route"],[52,16,48,22],[52,18,48,24,"node"],[53,8,49,12],[53,9,49,13],[54,6,50,8],[55,6,51,8],[55,13,51,15,"path"],[55,17,51,19],[56,4,52,4],[57,4,53,4],[57,8,53,10,"screens"],[57,15,53,17],[57,18,53,20,"getReactNavigationScreensConfig"],[57,49,53,51],[57,50,53,52,"node"],[57,54,53,56],[57,55,53,57,"children"],[57,63,53,65],[57,65,53,67,"metaOnly"],[57,73,53,75],[57,74,53,76],[58,4,54,4],[58,8,54,10,"screen"],[58,14,54,16],[58,17,54,19],[59,6,55,8,"path"],[59,10,55,12],[60,6,56,8,"screens"],[61,4,57,4],[61,5,57,5],[62,4,58,4],[62,8,58,8,"node"],[62,12,58,12],[62,13,58,13,"initialRouteName"],[62,29,58,29],[62,31,58,31],[63,6,59,8],[64,6,60,8],[65,6,61,8],[66,6,62,8],[67,6,63,8,"screen"],[67,12,63,14],[67,13,63,15,"initialRouteName"],[67,29,63,31],[67,32,63,34,"node"],[67,36,63,38],[67,37,63,39,"initialRouteName"],[67,53,63,55],[68,4,64,4],[69,4,65,4],[69,8,65,8],[69,9,65,9,"metaOnly"],[69,17,65,17],[69,19,65,19],[70,6,66,8,"screen"],[70,12,66,14],[70,13,66,15,"_route"],[70,19,66,21],[70,22,66,24,"node"],[70,26,66,28],[71,4,67,4],[72,4,68,4],[72,11,68,11,"screen"],[72,17,68,17],[73,2,69,0],[74,2,70,0],[74,11,70,9,"getReactNavigationScreensConfig"],[74,42,70,40,"getReactNavigationScreensConfig"],[74,43,70,41,"nodes"],[74,48,70,46],[74,50,70,48,"metaOnly"],[74,58,70,56],[74,60,70,58],[75,4,71,4],[75,11,71,11,"Object"],[75,17,71,17],[75,18,71,18,"fromEntries"],[75,29,71,29],[75,30,71,30,"nodes"],[75,35,71,35],[75,36,71,36,"map"],[75,39,71,39],[75,40,71,41,"node"],[75,44,71,45],[75,48,71,50],[75,49,71,51,"node"],[75,53,71,55],[75,54,71,56,"route"],[75,59,71,61],[75,61,71,63,"convertRouteNodeToScreen"],[75,85,71,87],[75,86,71,88,"node"],[75,90,71,92],[75,92,71,94,"metaOnly"],[75,100,71,102],[75,101,71,103],[75,102,71,104],[75,103,71,105],[75,104,71,106],[76,2,72,0],[77,2,73,0],[77,11,73,9,"getReactNavigationConfig"],[77,35,73,33,"getReactNavigationConfig"],[77,36,73,34,"routes"],[77,42,73,40],[77,44,73,42,"metaOnly"],[77,52,73,50],[77,54,73,52],[78,4,74,4],[78,8,74,10,"config"],[78,14,74,16],[78,17,74,19],[79,6,75,8,"initialRouteName"],[79,22,75,24],[79,24,75,26,"undefined"],[79,33,75,35],[80,6,76,8,"screens"],[80,13,76,15],[80,15,76,17,"getReactNavigationScreensConfig"],[80,46,76,48],[80,47,76,49,"routes"],[80,53,76,55],[80,54,76,56,"children"],[80,62,76,64],[80,64,76,66,"metaOnly"],[80,72,76,74],[81,4,77,4],[81,5,77,5],[82,4,78,4],[82,8,78,8,"routes"],[82,14,78,14],[82,15,78,15,"initialRouteName"],[82,31,78,31],[82,33,78,33],[83,6,79,8],[84,6,80,8],[85,6,81,8,"config"],[85,12,81,14],[85,13,81,15,"initialRouteName"],[85,29,81,31],[85,32,81,34,"routes"],[85,38,81,40],[85,39,81,41,"initialRouteName"],[85,55,81,57],[86,4,82,4],[87,4,83,4],[87,11,83,11,"config"],[87,17,83,17],[88,2,84,0],[89,0,84,1],[89,3]],"functionMap":{"names":["<global>","convertDynamicRouteToReactNavigation","parseRouteSegments","convertRouteNodeToScreen","getReactNavigationScreensConfig","nodes.map$argument_0","getReactNavigationConfig"],"mappings":"AAA;ACQ;CDiB;AEC;CFa;AGC;CH4B;AIC;wCCC,gED;CJC;AMC;CNW"}},"type":"js/module"}]}