{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":68,"index":83}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./Image","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":85},"end":{"line":5,"column":32,"index":117}}],"key":"I2Mr3f3chxmh02krEQCRqYY9hRA=","exportNames":["*"]}},{"name":"./utils/resolveSources","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":55,"index":251}}],"key":"DpM65pxwg+MyXfeuGazS5AMaNMU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use client';\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useImage = useImage;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _react = require(_dependencyMap[2], \"react\");\n  var _Image = require(_dependencyMap[3], \"./Image\");\n  var _resolveSources = require(_dependencyMap[4], \"./utils/resolveSources\");\n  /**\n   * A hook that loads an image from the given source and returns a reference\n   * to the native image instance, or `null` until the first image is successfully loaded.\n   *\n   * It loads a new image every time the `uri` of the provided source changes.\n   * To trigger reloads in some other scenarios, you can provide an additional dependency list.\n   * @platform android\n   * @platform ios\n   * @platform web\n   *\n   * @example\n   * ```ts\n   * import { useImage, Image } from 'expo-image';\n   * import { Text } from 'react-native';\n   *\n   * export default function MyImage() {\n   *   const image = useImage('https://picsum.photos/1000/800', {\n   *     maxWidth: 800,\n   *     onError(error, retry) {\n   *       console.error('Loading failed:', error.message);\n   *     }\n   *   });\n   *\n   *   if (!image) {\n   *     return <Text>Image is loading...</Text>;\n   *   }\n   *\n   *   return <Image source={image} style={{ width: image.width / 2, height: image.height / 2 }} />;\n   * }\n   * ```\n   */\n  function useImage(source) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var dependencies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var resolvedSource = (0, _resolveSources.resolveSource)(source);\n    var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n    // Since options are not dependencies of the below effect, we store them in a ref.\n    // Once the image is asynchronously loaded, the effect will use the most recent options,\n    // instead of the captured ones (especially important for callbacks that may change in subsequent renders).\n    var optionsRef = (0, _react.useRef)(options);\n    optionsRef.current = options;\n    (0, _react.useEffect)(() => {\n      // We're doing some asynchronous action in this effect, so we should keep track\n      // if the effect was already cleaned up. In that case, the async action shouldn't change the state.\n      var isEffectValid = true;\n      function loadImage() {\n        _Image.Image.loadAsync(resolvedSource, options).then(image => {\n          if (isEffectValid) {\n            setImage(image);\n          }\n        }).catch(error => {\n          if (!isEffectValid) {\n            return;\n          }\n          if (optionsRef.current.onError) {\n            optionsRef.current.onError(error, loadImage);\n          } else {\n            // Print unhandled errors to the console.\n            console.error(`Loading an image from '${resolvedSource.uri}' failed, use 'onError' option to handle errors and suppress this message`);\n            console.error(error);\n          }\n        });\n      }\n      loadImage();\n      return () => {\n        // Invalidate the effect and release the shared object to free up memory.\n        isEffectValid = false;\n        image?.release();\n      };\n    }, [resolvedSource.uri, ...dependencies]);\n    return image;\n  }\n});","lineCount":89,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"useImage"],[8,18,1,13],[8,21,1,13,"useImage"],[8,29,1,13],[9,2,1,13],[9,6,1,13,"_slicedToArray2"],[9,21,1,13],[9,24,1,13,"_interopRequireDefault"],[9,46,1,13],[9,47,1,13,"require"],[9,54,1,13],[9,55,1,13,"_dependencyMap"],[9,69,1,13],[10,2,3,0],[10,6,3,0,"_react"],[10,12,3,0],[10,15,3,0,"require"],[10,22,3,0],[10,23,3,0,"_dependencyMap"],[10,37,3,0],[11,2,5,0],[11,6,5,0,"_Image"],[11,12,5,0],[11,15,5,0,"require"],[11,22,5,0],[11,23,5,0,"_dependencyMap"],[11,37,5,0],[12,2,7,0],[12,6,7,0,"_resolveSources"],[12,21,7,0],[12,24,7,0,"require"],[12,31,7,0],[12,32,7,0,"_dependencyMap"],[12,46,7,0],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,2,40,7],[44,11,40,16,"useImage"],[44,19,40,24,"useImage"],[44,20,41,2,"source"],[44,26,41,30],[44,28,44,19],[45,4,44,19],[45,8,42,2,"options"],[45,15,42,27],[45,18,42,27,"arguments"],[45,27,42,27],[45,28,42,27,"length"],[45,34,42,27],[45,42,42,27,"arguments"],[45,51,42,27],[45,59,42,27,"undefined"],[45,68,42,27],[45,71,42,27,"arguments"],[45,80,42,27],[45,86,42,30],[45,87,42,31],[45,88,42,32],[46,4,42,32],[46,8,43,2,"dependencies"],[46,20,43,30],[46,23,43,30,"arguments"],[46,32,43,30],[46,33,43,30,"length"],[46,39,43,30],[46,47,43,30,"arguments"],[46,56,43,30],[46,64,43,30,"undefined"],[46,73,43,30],[46,76,43,30,"arguments"],[46,85,43,30],[46,91,43,33],[46,93,43,35],[47,4,45,2],[47,8,45,8,"resolvedSource"],[47,22,45,22],[47,25,45,25],[47,29,45,25,"resolveSource"],[47,58,45,38],[47,60,45,39,"source"],[47,66,45,45],[47,67,45,61],[48,4,46,2],[48,8,46,2,"_useState"],[48,17,46,2],[48,20,46,28],[48,24,46,28,"useState"],[48,39,46,36],[48,41,46,54],[48,45,46,58],[48,46,46,59],[49,6,46,59,"_useState2"],[49,16,46,59],[49,23,46,59,"_slicedToArray2"],[49,38,46,59],[49,39,46,59,"default"],[49,46,46,59],[49,48,46,59,"_useState"],[49,57,46,59],[50,6,46,9,"image"],[50,11,46,14],[50,14,46,14,"_useState2"],[50,24,46,14],[51,6,46,16,"setImage"],[51,14,46,24],[51,17,46,24,"_useState2"],[51,27,46,24],[53,4,48,2],[54,4,49,2],[55,4,50,2],[56,4,51,2],[56,8,51,8,"optionsRef"],[56,18,51,18],[56,21,51,21],[56,25,51,21,"useRef"],[56,38,51,27],[56,40,51,46,"options"],[56,47,51,53],[56,48,51,54],[57,4,52,2,"optionsRef"],[57,14,52,12],[57,15,52,13,"current"],[57,22,52,20],[57,25,52,23,"options"],[57,32,52,30],[58,4,54,2],[58,8,54,2,"useEffect"],[58,24,54,11],[58,26,54,12],[58,32,54,18],[59,6,55,4],[60,6,56,4],[61,6,57,4],[61,10,57,8,"isEffectValid"],[61,23,57,21],[61,26,57,24],[61,30,57,28],[62,6,59,4],[62,15,59,13,"loadImage"],[62,24,59,22,"loadImage"],[62,25,59,22],[62,27,59,25],[63,8,60,6,"Image"],[63,20,60,11],[63,21,60,12,"loadAsync"],[63,30,60,21],[63,31,60,22,"resolvedSource"],[63,45,60,36],[63,47,60,38,"options"],[63,54,60,45],[63,55,60,46],[63,56,61,9,"then"],[63,60,61,13],[63,61,61,15,"image"],[63,66,61,20],[63,70,61,25],[64,10,62,10],[64,14,62,14,"isEffectValid"],[64,27,62,27],[64,29,62,29],[65,12,63,12,"setImage"],[65,20,63,20],[65,21,63,21,"image"],[65,26,63,26],[65,27,63,27],[66,10,64,10],[67,8,65,8],[67,9,65,9],[67,10,65,10],[67,11,66,9,"catch"],[67,16,66,14],[67,17,66,16,"error"],[67,22,66,21],[67,26,66,26],[68,10,67,10],[68,14,67,14],[68,15,67,15,"isEffectValid"],[68,28,67,28],[68,30,67,30],[69,12,68,12],[70,10,69,10],[71,10,70,10],[71,14,70,14,"optionsRef"],[71,24,70,24],[71,25,70,25,"current"],[71,32,70,32],[71,33,70,33,"onError"],[71,40,70,40],[71,42,70,42],[72,12,71,12,"optionsRef"],[72,22,71,22],[72,23,71,23,"current"],[72,30,71,30],[72,31,71,31,"onError"],[72,38,71,38],[72,39,71,39,"error"],[72,44,71,44],[72,46,71,46,"loadImage"],[72,55,71,55],[72,56,71,56],[73,10,72,10],[73,11,72,11],[73,17,72,17],[74,12,73,12],[75,12,74,12,"console"],[75,19,74,19],[75,20,74,20,"error"],[75,25,74,25],[75,26,75,14],[75,52,75,40,"resolvedSource"],[75,66,75,54],[75,67,75,55,"uri"],[75,70,75,58],[75,145,76,12],[75,146,76,13],[76,12,77,12,"console"],[76,19,77,19],[76,20,77,20,"error"],[76,25,77,25],[76,26,77,26,"error"],[76,31,77,31],[76,32,77,32],[77,10,78,10],[78,8,79,8],[78,9,79,9],[78,10,79,10],[79,6,80,4],[80,6,82,4,"loadImage"],[80,15,82,13],[80,16,82,14],[80,17,82,15],[81,6,84,4],[81,13,84,11],[81,19,84,17],[82,8,85,6],[83,8,86,6,"isEffectValid"],[83,21,86,19],[83,24,86,22],[83,29,86,27],[84,8,87,6,"image"],[84,13,87,11],[84,15,87,13,"release"],[84,22,87,20],[84,23,87,21],[84,24,87,22],[85,6,88,4],[85,7,88,5],[86,4,89,2],[86,5,89,3],[86,7,89,5],[86,8,89,6,"resolvedSource"],[86,22,89,20],[86,23,89,21,"uri"],[86,26,89,24],[86,28,89,26],[86,31,89,29,"dependencies"],[86,43,89,41],[86,44,89,42],[86,45,89,43],[87,4,91,2],[87,11,91,9,"image"],[87,16,91,14],[88,2,92,0],[89,0,92,1],[89,3]],"functionMap":{"names":["<global>","useImage","useEffect$argument_0","loadImage","Image.loadAsync.then$argument_0","Image.loadAsync.then._catch$argument_0","<anonymous>"],"mappings":"AAA;OCuC;YCc;ICK;cCE;SDI;eEC;SFa;KDC;WII;KJI;GDC;CDG"}},"type":"js/module"}]}