{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":26,"index":26}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/PanResponder","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"NacIK8K4Ix298JTjZY1MHzOjiV0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.shouldDismissView = shouldDismissView;\n  exports.shouldSetPanResponder = shouldSetPanResponder;\n  exports.usePanResponder = usePanResponder;\n  var _react = _interopRequireDefault(require(_dependencyMap[1], \"react\"));\n  var _PanResponder = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/PanResponder\"));\n  function shouldSetPanResponder(_event, gesture) {\n    const {\n      dx,\n      dy\n    } = gesture;\n    // Fixes onPress handler\n    // https://github.com/calintamas/react-native-toast-message/issues/113\n    const offset = 2;\n    return Math.abs(dx) > offset || Math.abs(dy) > offset;\n  }\n  function shouldDismissView(newAnimatedValue, gesture) {\n    const dismissThreshold = 0.65;\n    const {\n      vy,\n      dy\n    } = gesture;\n    return newAnimatedValue <= dismissThreshold || Math.abs(vy) >= dismissThreshold && dy < 0;\n  }\n  function usePanResponder({\n    animatedValue,\n    computeNewAnimatedValueForGesture,\n    onDismiss,\n    onRestore,\n    disable\n  }) {\n    const onMove = _react.default.useCallback((_event, gesture) => {\n      if (disable) {\n        return;\n      }\n      const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n      animatedValue.current?.setValue(newAnimatedValue);\n    }, [animatedValue, computeNewAnimatedValueForGesture, disable]);\n    const onRelease = _react.default.useCallback((_event, gesture) => {\n      if (disable) {\n        return;\n      }\n      const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n      if (shouldDismissView(newAnimatedValue, gesture)) {\n        onDismiss();\n      } else {\n        onRestore();\n      }\n    }, [computeNewAnimatedValueForGesture, onDismiss, onRestore, disable]);\n    const panResponder = _react.default.useMemo(() => _PanResponder.default.create({\n      onMoveShouldSetPanResponder: shouldSetPanResponder,\n      onMoveShouldSetPanResponderCapture: shouldSetPanResponder,\n      onPanResponderMove: onMove,\n      onPanResponderRelease: onRelease\n    }), [onMove, onRelease]);\n    return {\n      panResponder,\n      onMove,\n      onRelease\n    };\n  }\n});","lineCount":66,"map":[[9,2,1,0],[9,6,1,0,"_react"],[9,12,1,0],[9,15,1,0,"_interopRequireDefault"],[9,37,1,0],[9,38,1,0,"require"],[9,45,1,0],[9,46,1,0,"_dependencyMap"],[9,60,1,0],[10,2,1,26],[10,6,1,26,"_PanResponder"],[10,19,1,26],[10,22,1,26,"_interopRequireDefault"],[10,44,1,26],[10,45,1,26,"require"],[10,52,1,26],[10,53,1,26,"_dependencyMap"],[10,67,1,26],[11,2,3,7],[11,11,3,16,"shouldSetPanResponder"],[11,32,3,37,"shouldSetPanResponder"],[11,33,3,38,"_event"],[11,39,3,44],[11,41,3,46,"gesture"],[11,48,3,53],[11,50,3,55],[12,4,4,4],[12,10,4,10],[13,6,4,12,"dx"],[13,8,4,14],[14,6,4,16,"dy"],[15,4,4,19],[15,5,4,20],[15,8,4,23,"gesture"],[15,15,4,30],[16,4,5,4],[17,4,6,4],[18,4,7,4],[18,10,7,10,"offset"],[18,16,7,16],[18,19,7,19],[18,20,7,20],[19,4,8,4],[19,11,8,11,"Math"],[19,15,8,15],[19,16,8,16,"abs"],[19,19,8,19],[19,20,8,20,"dx"],[19,22,8,22],[19,23,8,23],[19,26,8,26,"offset"],[19,32,8,32],[19,36,8,36,"Math"],[19,40,8,40],[19,41,8,41,"abs"],[19,44,8,44],[19,45,8,45,"dy"],[19,47,8,47],[19,48,8,48],[19,51,8,51,"offset"],[19,57,8,57],[20,2,9,0],[21,2,10,7],[21,11,10,16,"shouldDismissView"],[21,28,10,33,"shouldDismissView"],[21,29,10,34,"newAnimatedValue"],[21,45,10,50],[21,47,10,52,"gesture"],[21,54,10,59],[21,56,10,61],[22,4,11,4],[22,10,11,10,"dismissThreshold"],[22,26,11,26],[22,29,11,29],[22,33,11,33],[23,4,12,4],[23,10,12,10],[24,6,12,12,"vy"],[24,8,12,14],[25,6,12,16,"dy"],[26,4,12,19],[26,5,12,20],[26,8,12,23,"gesture"],[26,15,12,30],[27,4,13,4],[27,11,13,12,"newAnimatedValue"],[27,27,13,28],[27,31,13,32,"dismissThreshold"],[27,47,13,48],[27,51,14,9,"Math"],[27,55,14,13],[27,56,14,14,"abs"],[27,59,14,17],[27,60,14,18,"vy"],[27,62,14,20],[27,63,14,21],[27,67,14,25,"dismissThreshold"],[27,83,14,41],[27,87,14,45,"dy"],[27,89,14,47],[27,92,14,50],[27,93,14,52],[28,2,15,0],[29,2,16,7],[29,11,16,16,"usePanResponder"],[29,26,16,31,"usePanResponder"],[29,27,16,32],[30,4,16,34,"animatedValue"],[30,17,16,47],[31,4,16,49,"computeNewAnimatedValueForGesture"],[31,37,16,82],[32,4,16,84,"onDismiss"],[32,13,16,93],[33,4,16,95,"onRestore"],[33,13,16,104],[34,4,16,106,"disable"],[35,2,16,114],[35,3,16,115],[35,5,16,117],[36,4,17,4],[36,10,17,10,"onMove"],[36,16,17,16],[36,19,17,19,"React"],[36,33,17,24],[36,34,17,25,"useCallback"],[36,45,17,36],[36,46,17,37],[36,47,17,38,"_event"],[36,53,17,44],[36,55,17,46,"gesture"],[36,62,17,53],[36,67,17,58],[37,6,18,8],[37,10,18,12,"disable"],[37,17,18,19],[37,19,18,21],[38,8,19,12],[39,6,20,8],[40,6,21,8],[40,12,21,14,"newAnimatedValue"],[40,28,21,30],[40,31,21,33,"computeNewAnimatedValueForGesture"],[40,64,21,66],[40,65,21,67,"gesture"],[40,72,21,74],[40,73,21,75],[41,6,22,8,"animatedValue"],[41,19,22,21],[41,20,22,22,"current"],[41,27,22,29],[41,29,22,31,"setValue"],[41,37,22,39],[41,38,22,40,"newAnimatedValue"],[41,54,22,56],[41,55,22,57],[42,4,23,4],[42,5,23,5],[42,7,23,7],[42,8,23,8,"animatedValue"],[42,21,23,21],[42,23,23,23,"computeNewAnimatedValueForGesture"],[42,56,23,56],[42,58,23,58,"disable"],[42,65,23,65],[42,66,23,66],[42,67,23,67],[43,4,24,4],[43,10,24,10,"onRelease"],[43,19,24,19],[43,22,24,22,"React"],[43,36,24,27],[43,37,24,28,"useCallback"],[43,48,24,39],[43,49,24,40],[43,50,24,41,"_event"],[43,56,24,47],[43,58,24,49,"gesture"],[43,65,24,56],[43,70,24,61],[44,6,25,8],[44,10,25,12,"disable"],[44,17,25,19],[44,19,25,21],[45,8,26,12],[46,6,27,8],[47,6,28,8],[47,12,28,14,"newAnimatedValue"],[47,28,28,30],[47,31,28,33,"computeNewAnimatedValueForGesture"],[47,64,28,66],[47,65,28,67,"gesture"],[47,72,28,74],[47,73,28,75],[48,6,29,8],[48,10,29,12,"shouldDismissView"],[48,27,29,29],[48,28,29,30,"newAnimatedValue"],[48,44,29,46],[48,46,29,48,"gesture"],[48,53,29,55],[48,54,29,56],[48,56,29,58],[49,8,30,12,"onDismiss"],[49,17,30,21],[49,18,30,22],[49,19,30,23],[50,6,31,8],[50,7,31,9],[50,13,32,13],[51,8,33,12,"onRestore"],[51,17,33,21],[51,18,33,22],[51,19,33,23],[52,6,34,8],[53,4,35,4],[53,5,35,5],[53,7,35,7],[53,8,35,8,"computeNewAnimatedValueForGesture"],[53,41,35,41],[53,43,35,43,"onDismiss"],[53,52,35,52],[53,54,35,54,"onRestore"],[53,63,35,63],[53,65,35,65,"disable"],[53,72,35,72],[53,73,35,73],[53,74,35,74],[54,4,36,4],[54,10,36,10,"panResponder"],[54,22,36,22],[54,25,36,25,"React"],[54,39,36,30],[54,40,36,31,"useMemo"],[54,47,36,38],[54,48,36,39],[54,54,36,45,"PanResponder"],[54,75,36,57],[54,76,36,58,"create"],[54,82,36,64],[54,83,36,65],[55,6,37,8,"onMoveShouldSetPanResponder"],[55,33,37,35],[55,35,37,37,"shouldSetPanResponder"],[55,56,37,58],[56,6,38,8,"onMoveShouldSetPanResponderCapture"],[56,40,38,42],[56,42,38,44,"shouldSetPanResponder"],[56,63,38,65],[57,6,39,8,"onPanResponderMove"],[57,24,39,26],[57,26,39,28,"onMove"],[57,32,39,34],[58,6,40,8,"onPanResponderRelease"],[58,27,40,29],[58,29,40,31,"onRelease"],[59,4,41,4],[59,5,41,5],[59,6,41,6],[59,8,41,8],[59,9,41,9,"onMove"],[59,15,41,15],[59,17,41,17,"onRelease"],[59,26,41,26],[59,27,41,27],[59,28,41,28],[60,4,42,4],[60,11,42,11],[61,6,43,8,"panResponder"],[61,18,43,20],[62,6,44,8,"onMove"],[62,12,44,14],[63,6,45,8,"onRelease"],[64,4,46,4],[64,5,46,5],[65,2,47,0],[66,0,47,1],[66,3]],"functionMap":{"names":["<global>","shouldSetPanResponder","shouldDismissView","usePanResponder","onMove","onRelease","React.useMemo$argument_0"],"mappings":"AAA;OCE;CDM;OEC;CFK;OGC;qCCC;KDM;wCEC;KFW;uCGC;MHK;CHM"}},"type":"js/module"}]}